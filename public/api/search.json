[{"id":"8aaa3a5ad3ad0ba7a4b24d73de49e176","title":"logback同步日志到ELK","content":"使用docker-compose搭建ELK服务version: &quot;2&quot;\nservices:\n  es:\n    image: docker.elastic.co&#x2F;elasticsearch&#x2F;elasticsearch:7.17.10\n    container_name: &quot;es&quot;\n    environment:\n      - node.name&#x3D;es01\n      - cluster.name&#x3D;es-docker-cluster\n      # - discovery.seed_hosts&#x3D;es02,es03\n      # - cluster.initial_master_nodes&#x3D;es01,es02,es03\n      - bootstrap.memory_lock&#x3D;true\n      - &quot;ES_JAVA_OPTS&#x3D;-Xms512m -Xmx512m&quot;\n      - discovery.type&#x3D;single-node\n    volumes:\n      - .&#x2F;es&#x2F;data:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data\n      - .&#x2F;es&#x2F;plugins:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins\n    ports:\n      - &quot;9200:9200&quot;\n      - &quot;9300:9300&quot;\n    restart: always\n  kibana:\n    image: docker.elastic.co&#x2F;kibana&#x2F;kibana:7.17.10\n    container_name: &quot;kibana&quot;\n    restart: always\n    ports:\n      - &quot;5601:5601&quot;\n    environment:\n      - ELASTICSEARCH_HOSTS&#x3D;http:&#x2F;&#x2F;es:9200\n      - I18N_LOCALE&#x3D;zh-CN\n    # volumes:\n    #   - .&#x2F;kibana&#x2F;kibana.yml:&#x2F;usr&#x2F;share&#x2F;kibana&#x2F;config&#x2F;kibana.yml\n    depends_on:\n      - es\n  logstash:\n    image: docker.elastic.co&#x2F;logstash&#x2F;logstash:7.17.10\n    container_name: logstash\n    restart: always\n    environment:\n      - MONITORING_ELASTICSEARCH_HOSTS&#x3D;http:&#x2F;&#x2F;es:9200\n    volumes:\n      - .&#x2F;logstash&#x2F;pipeline&#x2F;:&#x2F;usr&#x2F;share&#x2F;logstash&#x2F;pipeline&#x2F;\n    ports:\n      - 4567:4567\n    depends_on:\n      - es\n\n\n添加logstash管道配置input &#123;\n  tcp &#123; &#x2F;&#x2F; 启动tcp服务，监听4567端口，接收logback发送的日志信息\n    mode &#x3D;&gt; &quot;server&quot;\n    host &#x3D;&gt; &quot;0.0.0.0&quot;\n    port &#x3D;&gt; 4567\n    codec &#x3D;&gt; json_lines\n  &#125;\n&#125;\n\nfilter &#123;\n  json &#123;\n    source &#x3D;&gt; &quot;message&quot;\n  &#125;\n&#125;\n\noutput &#123;\n  elasticsearch &#123;\n    hosts &#x3D;&gt; [&quot;http:&#x2F;&#x2F;es:9200&quot;]\n    index &#x3D;&gt; &quot;%&#123;[appname]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;\n    action &#x3D;&gt; &quot;create&quot;\n    #user &#x3D;&gt; &quot;elastic&quot;\n    #password &#x3D;&gt; &quot;changeme&quot;\n  &#125;\n&#125;\n\n\nspringboot配置pom.xml文件\n&lt;dependency&gt;\n    &lt;groupId&gt;net.logstash.logback&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;logstash-logback-encoder&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;7.3&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\nlogback-spring.xml配置\n&lt;!-- 输出到logstash --&gt;\n&lt;appender name&#x3D;&quot;logstash&quot; class&#x3D;&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;&gt;\n    &lt;!-- 上面logstash管道配置的端口 --&gt;\n    &lt;destination&gt;127.0.0.1:4567&lt;&#x2F;destination&gt;\n    &lt;encoder class&#x3D;&quot;net.logstash.logback.encoder.LogstashEncoder&quot;&gt;\n        &lt;!-- 添加自定义字段 json格式 --&gt;\n        &lt;customFields&gt;&#123;&quot;appname&quot;: &quot;1110-server&quot;&#125;&lt;&#x2F;customFields&gt;\n        &lt;!-- 包含代码中通过MDC添加的字段 --&gt;\n        &lt;includeMdc&gt;true&lt;&#x2F;includeMdc&gt;\n        &lt;includeCallerData&gt;true&lt;&#x2F;includeCallerData&gt;\n    &lt;&#x2F;encoder&gt;\n&lt;&#x2F;appender&gt;\n","slug":3498701858,"date":"2023-05-26T06:34:42.000Z","categories_index":"ELK","tags_index":"ELK,logback","author_index":"zengdw"},{"id":"35fc538bb1078fab2885b8644c7b9dfc","title":"Centos 7 安装 rabbitmq","content":"Centos 7 安装 rabbitmqrabbitmq最新版本已不支持Centos 7\n\n创建仓库\n\n# In &#x2F;etc&#x2F;yum.repos.d&#x2F;rabbitmq.repo\n\n##\n## Zero dependency Erlang\n##\n\n[rabbitmq_erlang]\nname&#x3D;rabbitmq_erlang\nbaseurl&#x3D;https:&#x2F;&#x2F;packagecloud.io&#x2F;rabbitmq&#x2F;erlang&#x2F;el&#x2F;7&#x2F;$basearch\nrepo_gpgcheck&#x3D;1\ngpgcheck&#x3D;1\nenabled&#x3D;1\n# PackageCloud&#39;s repository key and RabbitMQ package signing key\ngpgkey&#x3D;https:&#x2F;&#x2F;packagecloud.io&#x2F;rabbitmq&#x2F;erlang&#x2F;gpgkey\n       https:&#x2F;&#x2F;github.com&#x2F;rabbitmq&#x2F;signing-keys&#x2F;releases&#x2F;download&#x2F;2.0&#x2F;rabbitmq-release-signing-key.asc\nsslverify&#x3D;1\nsslcacert&#x3D;&#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;ca-bundle.crt\nmetadata_expire&#x3D;300\n\n[rabbitmq_erlang-source]\nname&#x3D;rabbitmq_erlang-source\nbaseurl&#x3D;https:&#x2F;&#x2F;packagecloud.io&#x2F;rabbitmq&#x2F;erlang&#x2F;el&#x2F;7&#x2F;SRPMS\nrepo_gpgcheck&#x3D;1\ngpgcheck&#x3D;0\nenabled&#x3D;1\ngpgkey&#x3D;https:&#x2F;&#x2F;packagecloud.io&#x2F;rabbitmq&#x2F;erlang&#x2F;gpgkey\nsslverify&#x3D;1\nsslcacert&#x3D;&#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;ca-bundle.crt\nmetadata_expire&#x3D;300\n\n##\n## RabbitMQ server\n##\n\n[rabbitmq_server]\nname&#x3D;rabbitmq_server\nbaseurl&#x3D;https:&#x2F;&#x2F;packagecloud.io&#x2F;rabbitmq&#x2F;rabbitmq-server&#x2F;el&#x2F;7&#x2F;$basearch\nrepo_gpgcheck&#x3D;1\ngpgcheck&#x3D;1\nenabled&#x3D;1\n# PackageCloud&#39;s repository key and RabbitMQ package signing key\ngpgkey&#x3D;https:&#x2F;&#x2F;packagecloud.io&#x2F;rabbitmq&#x2F;rabbitmq-server&#x2F;gpgkey\n       https:&#x2F;&#x2F;github.com&#x2F;rabbitmq&#x2F;signing-keys&#x2F;releases&#x2F;download&#x2F;2.0&#x2F;rabbitmq-release-signing-key.asc\nsslverify&#x3D;1\nsslcacert&#x3D;&#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;ca-bundle.crt\nmetadata_expire&#x3D;300\n\n[rabbitmq_server-source]\nname&#x3D;rabbitmq_server-source\nbaseurl&#x3D;https:&#x2F;&#x2F;packagecloud.io&#x2F;rabbitmq&#x2F;rabbitmq-server&#x2F;el&#x2F;7&#x2F;SRPMS\nrepo_gpgcheck&#x3D;1\ngpgcheck&#x3D;0\nenabled&#x3D;1\ngpgkey&#x3D;https:&#x2F;&#x2F;packagecloud.io&#x2F;rabbitmq&#x2F;rabbitmq-server&#x2F;gpgkey\nsslverify&#x3D;1\nsslcacert&#x3D;&#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;ca-bundle.crt\nmetadata_expire&#x3D;300\n\n\n进行安装\n\n#更新yum源\nyum update -y\n\n#install these dependencies from standard OS repositories\nyum install socat logrotate -y\n\n#安装erlang和rabbitmq\nyum install erlang rabbitmq-server -y\n\n\n基本操作\n\n启动rabbitmq\n\n\n\n\n\n\n\n\n\nsudo systemctl start rabbitmq-server\n设置开机启动\n\n\n\n\n\n\n\n\n\nsudo systemctl enable rabbitmq-server\n安装web插件\n\n\n\n\n\n\n\n\n\nsudo rabbitmq-plugins enable rabbitmq_management\n创建账号，设置权限（也可在web端添加）\n\n\n\n\n\n\n\n\n\nsudo rabbitmqctl add_user admin adminsudo rabbitmqctl set_user_tags admin administratorsudo rabbitmqctl set_permissions -p / admin ‘.‘ ‘.‘ ‘.*’sudo rabbitmqctl list_permissions\n修改配置文件。默认rabbitmq是没有创建它的配置文件的。它的默认位置是在/etc/rabbitmq。我们可以创建一个空的配置文件\n\n\n\n\n\n\n\n\n\nsudo vim /etc/rabbitmq/rabbitmq.conf\n加入如下配置\n\n\n\n\n\n\n\n\n\nloopback_users.guest=false\n重启你的rabbitmq服务。上面的配置是让guest账号可以远程登录\n","slug":2535833376,"date":"2022-08-25T07:13:01.000Z","categories_index":"rabbitmq,linux","tags_index":"centos,rabbitmq","author_index":"zengdw"},{"id":"450f8cafb9966ab433a025fae8f6dbb3","title":"Angular 工作区配置","content":"Angular 工作区根目录下的 angular.json 文件提供了全工作区级的配置和具体项目的默认配置，供 Angular CLI 中的构建工具和开发工具使用。 此配置中所提供的路径值都是相对于工作区根目录的\nJSON的总体结构在angular.json的顶层，一些属性用于工作区配置。其中的 projects 区则包含其余的针对每个项目的配置项。CLI 在工作区级的默认设置可以被项目级的设置所覆盖，而项目级的设置可以被命令行中的设置所覆盖。\n下列属性位于文件的顶层，用于配置工作区。\n\nversion：该配置文件的版本。\nnewProjectRoot：用来创建新工程的位置。绝对路径或相对于工作区目录的路径。\ndefaultProject：当命令中没有指定参数时，要使用的默认工程名。当你用 ng new 在新的工作区中创建新应用时，该应用就会一直作为此工作区的默认项目，除非你到这里修改它。\nschematics：一组原理图，用于定制 ng generate 子命令在本工作区中的默认选项。参阅生成器原理图。\nprojects：对于工作区中的每个项目（应用或库）都会包含一个子分区，子分区中是每个项目的配置项。\n\n项目配置选项每个项目的 projects:&lt;project_name&gt; 下都有以下顶层配置属性。\n&quot;my-app&quot;: &#123;\n  &quot;root&quot;: &quot;&quot;,\n  &quot;sourceRoot&quot;: &quot;src&quot;,\n  &quot;projectType&quot;: &quot;application&quot;,\n  &quot;prefix&quot;: &quot;app&quot;,\n  &quot;schematics&quot;: &#123;&#125;,\n  &quot;architect&quot;: &#123;&#125;\n&#125;\n\n\n\n\n属性\n说明\n\n\n\nroot\n该项目的根文件夹，相对于工作区文件夹的路径。初始应用的值为空，因为它位于工作区的顶层。\n\n\nsourceRoot\n该项目源文件的根文件夹。\n\n\nprojectType\n“application” 或 “library” 之一。应用可以在浏览器中独立运行，而库则不行。\n\n\nprefix\nAngular 所生成的选择器的前缀字符串。可以自定义它，以作为应用或功能区的标识。\n\n\nschematics\n一组原理图（schematic），它可以为该项目自定义 ng generate 子命令的默认选项。参见生成原理图部分。\n\n\narchitect\n为本项目的各个构建器目标配置默认值。\n\n\n","slug":3154631999,"date":"2021-12-24T10:20:08.000Z","categories_index":"Angular","tags_index":"Angular","author_index":"zengdw"},{"id":"a3fcce9bf882ac6a7764fea2087b5c3b","title":"Angular 项目结构","content":"Angular以工作区作为上下文来开发应用。工作区包含一个或多个项目的文件集。一个项目就是一组包含独立应用或可共享库的文件。Angular CLI 的 ng new &lt;my-project&gt; 命令可以创建一个工作区。\n工作区配置文件每个工作区中的所有项目共享同一个 CLI 配置环境。该工作区的顶层包含着全工作区级的配置文件、根应用的配置文件以及一些包含根应用的源文件和测试文件的子文件夹。\n\n\n\n工作区配置文件\n用途\n\n\n\n.editorconfig\n代码编辑器的配置。参阅 EditorConfig。\n\n\n.gitignore\n指定 Git 应忽略的不必追踪的文件。\n\n\nREADME.md\n根应用的简介文档.\n\n\nangular.json\n为工作区中的所有项目指定 CLI 的默认配置，包括 CLI 要用到的构建、启动开发服务器和测试工具的配置项，比如 TSLint，Karma 和 Protractor。欲知详情，请参阅 Angular 工作区配置 部分。\n\n\npackage.json\n配置工作区中所有项目可用的 npm 包依赖。\n\n\nsrc/\n根项目的源文件。\n\n\ntsconfig.json\n工作区中所有项目的基本 TypeScript 配置。所有其它配置文件都继承自这个基本配置。欲知详情，参阅 TypeScript 文档中的 通过 extends 进行配置继承 部分。\n\n\ntslint.json\n工作区中所有项目的默认的 TSLint 配置。\n\n\n应用项目文件CLI 命令 ng new my-app 会默认创建名为 “my-app” 的工作区文件夹，并在 src/ 文件夹下为工作区顶层的根应用生成一个新的应用骨架。新生成的应用包含一个根模块的源文件，包括一个根组件及其模板。\n当工作区文件结构到位时，可以在命令行中使用 ng generate 命令往该应用中添加功能和数据。这个初始的根应用是 CLI 命令的默认应用\n对于单应用的工作区，工作区的 src/ 子文件夹包含根应用的源文件（应用逻辑、数据和静态资源）。对于多项目的工作区，projects/ 文件夹中的其它项目各自包含一个具有相同结构的 project-name/src/ 子目录。\n应用源文件顶层文件 src/ 为测试并运行应用提供支持。其子文件夹中包含应用源代码和应用的专属配置。\n\n\n\n应用支持文件\n目的\n\n\n\napp/\n包含定义应用逻辑和数据的组件文件。\n\n\nassets/\n包含要在构建应用时应该按原样复制的图像和其它静态资源文件。\n\n\nenvironments/\n包含特定目标环境的构建配置选项。默认情况下，有一个无名的标准开发环境和一个生产（“prod”）环境。你还可以定义其它的目标环境配置。\n\n\nfavicon.ico\n用作该应用在标签栏中的图标。\n\n\nindex.html\n提供服务的主要 HTML 页面。CLI 会在构建应用时自动添加所有的 JavaScript 和 CSS 文件，所以通常不用手动添加任何 &lt;script&gt; 或 &lt;link&gt; 标签。\n\n\nmain.ts\n应用的主要切入点。用 JIT 编译器编译应用，然后引导应用的根模块（AppModule）在浏览器中运行。也可以在不改变任何代码的情况下改用 AOT 编译器，只要在 CLI 的 build 和 serve 命令中加上 --aot 标志就可以了。\n\n\npolyfills.ts\n为浏览器支持提供了腻子（polyfill）脚本。\n\n\nstyles.sass\n列出为项目提供样式的 CSS 文件。该扩展还反映了为该项目配置的样式预处理器。\n\n\ntest.ts\n单元测试的主入口点，带有一些 Angular 特有的配置。通常不需要编辑这个文件。\n\n\n在 src/ 文件夹里面，app/ 文件夹中包含此项目的逻辑和数据。Angular 组件、模板和样式也都在这里。\n\n\n\nSRC/APP/ 文件\n用途\n\n\n\napp/app.component.ts\n为应用的根组件定义逻辑，名为 AppComponent。当你向应用中添加组件和服务时，与这个根组件相关联的视图就会成为视图树的根。\n\n\napp/app.component.html\n定义与根组件 AppComponent 关联的 HTML 模板。\n\n\napp/app.component.css\n为根组件 AppComponent 定义了基本的 CSS 样式表。\n\n\napp/app.component.spec.ts\n为根组件 AppComponent 定义了一个单元测试。\n\n\napp/app.module.ts\n定义了名为 AppModule 的根模块，它会告诉 Angular 如何组装应用。这里最初只声明一个 AppComponent。当你向应用中添加更多组件时，它们也必须在这里声明。\n\n\n应用配置文件根应用的配置文件位于工作区的根目录下。对于多项目工作区，项目专属的配置文件位于项目根目录 projects/project-name/。\n项目专属的 TypeScript 配置文件继承自工作区范围内的 tsconfig.json，而项目专属的 TSLint 配置文件则继承自全工作区级内的 tslint.json。\n\n\n\n应用专属的配置文件\n用途\n\n\n\n.browserslistrc\n配置各种前端工具之间共享的目标浏览器和 Node.js 版本。\n\n\nkarma.conf.js\n应用专属的 Karma 配置。\n\n\ntsconfig.app.json\n应用专属的 TypeScript 配置，包括 TypeScript 和 Angular 模板编译器的选项。参阅 TypeScript 配置。\n\n\ntsconfig.spec.json\n应用测试的 TypeScript 配置。参阅 TypeScript 配置。\n\n\ntslint.json\n应用专属的 TSLint 配置。\n\n\n多重项目多项目工作区适用于对所有 Angular 项目使用单一存储库（单仓库模型）和全局配置的企业。多项目工作区也能为库开发提供支持。\n建立多项目工作区如果打算在工作区中包含多个项目，可以在创建工作区时不要自动创建初始应用，并为工作区指定一个唯一的名字。下列命令用于创建一个包含全工作区级配置文件的工作区，但没有根应用。\nng new my-workspace --create-application false\n\n然后，可以使用工作区内唯一的名字来生成应用和库。\ncd my-workspace\nng generate application my-first-app\n\n多重项目的文件结构工作区中第一个显式生成的应用会像工作区中的其它项目一样放在 projects/ 文件夹中。新生成的库也会添加到 projects/ 下。当你以这种方式创建项目时，工作区的文件结构与工作区配置文件 angular.json 中的结构完全一致。\nmy-workspace&#x2F;\n  ...             (workspace-wide config files)\n  projects&#x2F;       (generated applications and libraries)\n    my-first-app&#x2F; --(an explicitly generated application)\n      ...         --(application-specific config)\n      src&#x2F;        --(source and support files for application)\n    my-lib&#x2F;       --(a generated library)\n      ...         --(library-specific config)\n      src&#x2F;        --source and support files for library)\n\n库项目文件当你使用 CLI 命令（例如 ng generate library my-lib）生成一个库时，所生成的文件会放在工作区的 projects/ 文件夹中。\n库和应用不同，它们有自己的 package.json 配置文件。在 projects/ 目录下，my-lib 文件夹中包含你的库代码。\n\n\n\n库的源文件\n用途\n\n\n\nsrc/lib\n包含库项目的逻辑和数据。像应用项目一样，库项目也可以包含组件、服务、模块、指令和管道。\n\n\nsrc/test.ts\n单元测试的主要入口点是一些库专属的配置。通常不用编辑这个文件。\n\n\nsrc/public-api.ts\n指定从库中导出的所有文件。\n\n\nkarma.conf.js\n库专属的 Karma 配置。\n\n\nng-package.json\n构建库时，ng-packagr 用到的配置文件。\n\n\npackage.json\n配置这个库所需的 npm 包依赖。\n\n\ntsconfig.lib.json\n库专属的 TypeScript 配置，包括 TypeScript 和 Angular 模板编译器选项。参阅 TypeScript 配置。\n\n\ntsconfig.lib.prod.json\n库专属的 TypeScript 配置，用于构建生产模式的库。\n\n\ntsconfig.spec.json\n测试库时用到的 TypeScript 配置。\n\n\ntslint.json\n库专属的 TSLint 配置。\n\n\n","slug":742625435,"date":"2021-12-23T02:16:35.000Z","categories_index":"Angular","tags_index":"Angular","author_index":"zengdw"},{"id":"78ffce49b04ec8f420c47ced87ba3443","title":"solr查询","content":"solr查询\n\n\n\n\n\n\n\n\nhttp://127.0.0.1:8983/solr/films/select     films:索引名称\n搜索单个术语这可以跨多个字段进行查询，通过复制字段（Copy Field）实现\n\n\n\n\n\n\n\n\n\n/select?q=查询参数\n限制返回文档的字段\n\n\n\n\n\n\n\n\n/select?fl=id,name\n字段搜索\n\n\n\n\n\n\n\n\n/select?q=查询字段:查询参数\n短语查询短语查询需要使用双引号括起来\n\n\n\n\n\n\n\n\n\n/select?q=”查询短语”\n组合查询默认情况下，在查询多个短语或术语时，solr只要求其中一个和文档匹配就会返回，匹配的术语或短语越多就在结果列中排在前面。可以使用+前缀来要求术语或短语存在，使用-前缀来禁止术语或短语存在。例如要同时存在electronics和music,只需要在查询参数q上输入+electronics +music。Get查询url参数+``-特效符合需要转义：\n\n\n\n\n\n\n\n\n\n/select?q=%2Belectronics%20%2Bmusic\n如果要只存在electronics而不包含music，则在查询参数q上输入+electronics -music。转义之后：\n\n\n\n\n\n\n\n\n\n/select?q=%2Belectronics+-music\n","slug":1939,"date":"2021-10-26T02:59:22.000Z","categories_index":"中间键","tags_index":"solr,tomcat,搜索引擎","author_index":"zengdw"},{"id":"eadba8e1a04c15f70a9e16ebbfce5177","title":"solr 在tomcat中部署","content":"下载安装包在solr官网下载安装包。solr有个3个独立的软件包：\n1、solr-8.10.0-src.tgz：solr的源码包\n2、solr-8.10.0.tgz：solr linux环境的安装包\n3、solr-8.10.0.zip：solr window环境的安装包\nsolr目录介绍solr-8.10.0\n├── bin                          solr的启动 停止脚本\n├── CHANGES.txt\n├── contrib                      包含solr的附加插件                  \n├── dist                         包含solr的主要jar包\n├── docs                         包括一个链接到在线 Javadocs\n├── example                      几种类型的示例\n├── licenses\n├── LICENSE.txt\n├── LUCENE_CHANGES.txt\n├── NOTICE.txt\n├── README.txt\n└── server\n\nserver目录：\n此目录是 Solr 应用程序的核心所在。此目录中的 README 提供了详细的概述，但以下是一些特点：\nSolr 的 Admin UI（server&#x2F;solr-webapp）\nJetty 库（server&#x2F;lib）\n日志文件（server&#x2F;logs）和日志配置（server&#x2F;resources）。有关如何自定义 Solr 的默认日志记录的详细信息，请参阅配置日志记录一节。\nsolr 的 core 主目录（server&#x2F;solr）\n示例配置（server&#x2F;solr&#x2F;configsets）\n\n在tomcat中部署步骤：1、复制 solr/server/solr-webapp下的webapp目录的所有内容到tomcat/webapps下，并改名为solr。\n2、复制solr/server/lib/ext下的所有jar包到tomcat-9/webapps/solr/WEB-INF/lib下\n3、复制solr/server/lib下metrics-*开头的jar到tomcat-9/webapps/solr/WEB-INF/lib下\n4、复制solr/dist目录下的solr-analy*和solr-dataimporthandler到tomcat-9/webapps/solr/WEB-INF/lib下\n5、在tomcat-9/webapps/solr/WEB-INF/下创建classes文件夹\n6、复制server/resources下的logfj2配置文件到刚创建的classes文件夹中\n7、复制server/solr目录到任意位置（这个是solr core的主目录）\n8、修改tomcat-9/webapps/solr/WEB-INF/web.xml文件\n&lt;!-- 在web-app节点中加入 --&gt;\n&lt;env-entry&gt;\n  &lt;env-entry-name&gt;solr&#x2F;home&lt;&#x2F;env-entry-name&gt;\n  &lt;!-- 配置第6步solr core主目录的位置 --&gt;\n  &lt;env-entry-value&gt;&#x2F;usr&#x2F;local&#x2F;solr&lt;&#x2F;env-entry-value&gt;\n  &lt;env-entry-type&gt;java.lang.String&lt;&#x2F;env-entry-type&gt;\n&lt;&#x2F;env-entry&gt;\n\n&lt;!-- 注释掉 security-constraint --&gt;\n&lt;!-- Get rid of error message \n&lt;security-constraint&gt;\n  &lt;web-resource-collection&gt;\n    &lt;web-resource-name&gt;Disable TRACE&lt;&#x2F;web-resource-name&gt;\n    &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;\n    &lt;http-method&gt;TRACE&lt;&#x2F;http-method&gt;\n  &lt;&#x2F;web-resource-collection&gt;\n  &lt;auth-constraint&#x2F;&gt;\n&lt;&#x2F;security-constraint&gt;\n&lt;security-constraint&gt;\n  &lt;web-resource-collection&gt;\n    &lt;web-resource-name&gt;Enable everything but TRACE&lt;&#x2F;web-resource-name&gt;\n    &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;\n    &lt;http-method-omission&gt;TRACE&lt;&#x2F;http-method-omission&gt;\n  &lt;&#x2F;web-resource-collection&gt;\n&lt;&#x2F;security-constraint&gt;\n--&gt;\n\n9、启动tomcat,访问localhost:8080/solr即可\n创建core1、在solr core的主目录下创建test(core的名称)文件夹\n2、在test下创建conf和data文件夹\n3、复制solr-8.10.0/example/example-DIH/solr/solr/conf文件夹下的所有内容到刚创建的conf目录中\n4、重启tomcat\n\n","slug":6408,"date":"2021-10-15T07:36:53.000Z","categories_index":"中间键","tags_index":"solr,tomcat,搜索引擎","author_index":"zengdw"},{"id":"bb670faffeae4e8deeed3432c0004482","title":"第一个Kubernetes服务","content":"第一个Kubernetes服务创建 Deploymentnginx-deployment.yaml\napiVersion: apps&#x2F;v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment # 表示Deployment的名字\n  labels:\n    app: nginx\nspec:\n  replicas: 3 # Pod副本个数\n  selector: # selector 字段定义 Deployment 如何查找要管理的 Pods\n    matchLabels: # 表示匹配labels key&#x3D;app，value&#x3D;ngix的Pod\n      app: nginx\n  template:\n    metadata:\n      labels: # Pod的标签，要与上面的selector.matchLabels的匹配，Deployment才能管理这个Pod\n        app: nginx\n    spec:\n      containers: # 定义容器镜像\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n\n1、通过运行以下命令创建 Deployment：\nkubectl apply -f nginx-deployment.yaml --record \n\n\n\n\n\n\n\n\n\n说明： 你可以设置 --record 标志将所执行的命令写入资源注解 kubernetes.io/change-cause 中。 这对于以后的检查是有用的。例如，要查看针对每个 Deployment 修订版本所执行过的命令。\n2、运行 kubectl get deployments 检查 Deployment 是否已创建。如果仍在创建 Deployment， 则输出类似于：\nNAME               READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment   0&#x2F;3     3            0           41s\n\n在检查集群中的 Deployment 时，所显示的字段有：\n\nNAME 列出了集群中 Deployment 的名称。\nREADY 显示应用程序的可用的 副本 数。显示的模式是“就绪个数/期望个数”。\nUP-TO-DATE 显示为了达到期望状态已经更新的副本数。\nAVAILABLE 显示应用可供用户使用的副本数。\nAGE 显示应用程序运行的时间。\n\n请注意期望副本数是根据 .spec.replicas 字段设置 3。\n3、要查看 Deployment 上线状态，运行 kubectl rollout status deployment/nginx-deployment。\n输出类似于：\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 0 of 3 updated replicas are available...\n\n4、几秒钟后再次运行 kubectl get deployments。输出类似于：\nNAME               READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment   3&#x2F;3     3            3           9m18s\n\n注意 Deployment 已创建全部三个副本，并且所有副本都是最新的（它们包含最新的 Pod 模板） 并且可用。\n5、要查看 Deployment 创建的 ReplicaSet（rs），运行 kubectl get rs。 输出类似于：\nNAME                          DESIRED   CURRENT   READY   AGE\nnginx-deployment-66b6c48dd5   3         3         3       9m58s\n\nReplicaSet 输出中包含以下字段：\n\nNAME 列出名字空间中 ReplicaSet 的名称；\nDESIRED 显示应用的期望副本个数，即在创建 Deployment 时所定义的值。 此为期望状态；\nCURRENT 显示当前运行状态中的副本个数；\nREADY 显示应用中有多少副本可以为用户提供服务；\nAGE 显示应用已经运行的时间长度。\n\n注意 ReplicaSet 的名称始终被格式化为[Deployment名称]-[随机字符串]。 其中的随机字符串是使用 pod-template-hash 作为种子随机生成的。\n更新Deployment\n\n\n\n\n\n\n\n\n说明： 仅当 Deployment Pod 模板（即 .spec.template）发生改变时，例如模板的标签或容器镜像被更新， 才会触发 Deployment 上线。 其他更新（如对 Deployment 执行扩缩容的操作）不会触发上线动作\n1、把nginx-deployment.yaml中spec.containers.image: nginx:1.14.2改为spec.containers.image: nginx:1.16.1\n2、重新执行kubectl apply -f nginx-deployment.yaml --record \n3、要查看上线状态，运行kubectl rollout status deployment/nginx-deployment, 输出类型于:\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 out of 3 new replicas have been updated...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 out of 3 new replicas have been updated...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 out of 3 new replicas have been updated...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 2 out of 3 new replicas have been updated...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 2 out of 3 new replicas have been updated...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 2 out of 3 new replicas have been updated...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 old replicas are pending termination...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 old replicas are pending termination...\ndeployment &quot;nginx-deployment&quot; successfully rolled out\n\n4、运行 kubectl get rs 查看 Deployment 通过创建新的 ReplicaSet 并将其扩容到 3 个副本并将旧 ReplicaSet 缩容到 0 个副本完成了 Pod 的更新操作：\nNAME                          DESIRED   CURRENT   READY   AGE\nnginx-deployment-559d658b74   3         3         3       5m41s\nnginx-deployment-66b6c48dd5   0         0         0       20m\n\nDeployment 可确保在更新时仅关闭一定数量的 Pod。默认情况下，它确保至少所需 Pods 75% 处于运行状态（最大不可用比例为 25%）。\nDeployment 还确保仅所创建 Pod 数量只可能比期望 Pods 数高一点点。 默认情况下，它可确保启动的 Pod 个数比期望个数最多多出 25%（最大峰值 25%）。\n例如，如果仔细查看上述 Deployment ，将看到它首先创建了一个新的 Pod，然后删除了一些旧的 Pods， 并创建了新的 Pods。它不会杀死老 Pods，直到有足够的数量新的 Pods 已经出现。 在足够数量的旧 Pods 被杀死前并没有创建新 Pods。它确保至少 2 个 Pod 可用，同时 最多总共 4 个 Pod 可用。\n5、获取 Deployment 的更多信息，运行kubectl describe deployments，输出类型于：\nName:                   nginx-deployment\nNamespace:              default\nCreationTimestamp:      Thu, 16 Sep 2021 09:25:41 +0000\nLabels:                 app&#x3D;nginx\nAnnotations:            deployment.kubernetes.io&#x2F;revision: 2\n                        kubernetes.io&#x2F;change-cause: kubectl apply --filename&#x3D;nginx-deployment.yaml --record&#x3D;true\nSelector:               app&#x3D;nginx\nReplicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable\nStrategyType:           RollingUpdate\nMinReadySeconds:        0\nRollingUpdateStrategy:  25% max unavailable, 25% max surge\nPod Template:\n  Labels:  app&#x3D;nginx\n  Containers:\n   nginx:\n    Image:        nginx:1.16.1\n    Port:         80&#x2F;TCP\n    Host Port:    0&#x2F;TCP\n    Environment:  &lt;none&gt;\n    Mounts:       &lt;none&gt;\n  Volumes:        &lt;none&gt;\nConditions:\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    NewReplicaSetAvailable\nOldReplicaSets:  &lt;none&gt;\nNewReplicaSet:   nginx-deployment-559d658b74 (3&#x2F;3 replicas created)\nEvents:\n  Type    Reason             Age    From                   Message\n  ----    ------             ----   ----                   -------\n  Normal  ScalingReplicaSet  21m    deployment-controller  Scaled up replica set nginx-deployment-66b6c48dd5 to 3\n  Normal  ScalingReplicaSet  6m45s  deployment-controller  Scaled up replica set nginx-deployment-559d658b74 to 1\n  Normal  ScalingReplicaSet  3m36s  deployment-controller  Scaled down replica set nginx-deployment-66b6c48dd5 to 2\n  Normal  ScalingReplicaSet  3m36s  deployment-controller  Scaled up replica set nginx-deployment-559d658b74 to 2\n  Normal  ScalingReplicaSet  3m34s  deployment-controller  Scaled down replica set nginx-deployment-66b6c48dd5 to 1\n  Normal  ScalingReplicaSet  3m34s  deployment-controller  Scaled up replica set nginx-deployment-559d658b74 to 3\n  Normal  ScalingReplicaSet  2m6s   deployment-controller  Scaled down replica set nginx-deployment-66b6c48dd5 to 0\n\n回滚 Deployment在Deployment不稳定或出现异常时我们需要回滚Deployment。默认情况下，Deployment的所有上线记录都保存在服务器中，以便可以随时回滚。\n\n\n\n\n\n\n\n\n\n说明： Deployment 被触发上线时，系统就会创建 Deployment 的新的修订版本。 这意味着仅当 Deployment 的 Pod 模板（.spec.template）发生更改时，才会创建新修订版本 – 例如，模板的标签或容器镜像发生变化。 其他更新，如 Deployment 的扩缩容操作不会创建 Deployment 修订版本。 这是为了方便同时执行手动缩放或自动缩放。 换言之，当你回滚到较早的修订版本时，只有 Deployment 的 Pod 模板部分会被回滚。\n\n假设你在更新 Deployment 时犯了一个拼写错误，将镜像名称命名设置为 nginx:1.161 而不是 nginx:1.16.1：\n\n查看所创建的 Pod，你会注意到新 ReplicaSet 所创建的 1 个 Pod 卡顿在镜像拉取循环中。\nwatch kubectl get pods\n######################\nEvery 2.0s: kubectl get pods                                                                    ubuntu: Fri Sep 17 02:15:38 2021\n\nNAME                                READY   STATUS             RESTARTS      AGE\nnginx-deployment-559d658b74-5gmdf   1&#x2F;1     Running            1 (50m ago)   16h\nnginx-deployment-559d658b74-9rv5c   1&#x2F;1     Running            1 (50m ago)   16h\nnginx-deployment-559d658b74-l7dnt   1&#x2F;1     Running            1 (50m ago)   16h\nnginx-deployment-66bc5d6c8-lqlrm    0&#x2F;1     ImagePullBackOff   0             3m14s\n\n\n\n\n\n\n\n\n\n\n说明： Deployment 控制器自动停止有问题的上线过程，并停止对新的 ReplicaSet 扩容。 这行为取决于所指定的 rollingUpdate 参数（具体为 maxUnavailable）。 默认情况下，Kubernetes 将此值设置为 25%。\n\n你可以看到旧的副本有两个（nginx-deployment-559d658b74 和 nginx-deployment-66b6c48dd5）， 新的副本有 1 个（nginx-deployment-66bc5d6c8）：\nkubectl get rs\n##############\nNAME                          DESIRED   CURRENT   READY   AGE\nnginx-deployment-559d658b74   3         3         3       16h\nnginx-deployment-66b6c48dd5   0         0         0       16h\nnginx-deployment-66bc5d6c8    1         1         0       4m46s\n获取 Deployment 描述信息：\nkubectl describe deployment nginx-deployment\n########################\nName:                   nginx-deployment\nNamespace:              default\nCreationTimestamp:      Thu, 16 Sep 2021 09:25:41 +0000\nLabels:                 app&#x3D;nginx\nAnnotations:            deployment.kubernetes.io&#x2F;revision: 3\nSelector:               app&#x3D;nginx\nReplicas:               3 desired | 1 updated | 4 total | 3 available | 1 unavailable\nStrategyType:           RollingUpdate\nMinReadySeconds:        0\nRollingUpdateStrategy:  25% max unavailable, 25% max surge\nPod Template:\n  Labels:  app&#x3D;nginx\n  Containers:\n   nginx:\n    Image:        nginx:1.161\n    Port:         80&#x2F;TCP\n    Host Port:    0&#x2F;TCP\n    Environment:  &lt;none&gt;\n    Mounts:       &lt;none&gt;\n  Volumes:        &lt;none&gt;\nConditions:\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    ReplicaSetUpdated\nOldReplicaSets:  nginx-deployment-559d658b74 (3&#x2F;3 replicas created)\nNewReplicaSet:   nginx-deployment-66bc5d6c8 (1&#x2F;1 replicas created)\nEvents:\n  Type    Reason             Age    From                   Message\n  ----    ------             ----   ----                   -------\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled up replica set nginx-deployment-66b6c48dd5 to 3\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled up replica set nginx-deployment-559d658b74 to 1\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled down replica set nginx-deployment-66b6c48dd5 to 2\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled up replica set nginx-deployment-559d658b74 to 2\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled down replica set nginx-deployment-66b6c48dd5 to 1\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled up replica set nginx-deployment-559d658b74 to 3\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled down replica set nginx-deployment-66b6c48dd5 to 0\n  Normal  ScalingReplicaSet  8m25s  deployment-controller  Scaled up replica set nginx-deployment-66bc5d6c8 to 1\n\n检查 Deployment 上线历史按照如下步骤检查回滚历史：\n\n首先，检查 Deployment 修订历史：\nkubectl rollout history deployment nginx-deployment\n##############################\ndeployment.apps&#x2F;nginx-deployment \nREVISION  CHANGE-CAUSE\n1         &lt;none&gt;\n2         kubectl apply --filename&#x3D;nginx-deployment.yaml --record&#x3D;true\n3         kubectl apply --filename&#x3D;nginx-deployment.yaml --record&#x3D;true\n要查看修订历史的详细信息，运行：\nkubectl rollout history deployment nginx-deployment --revision&#x3D;3\n#############################\ndeployment.apps&#x2F;nginx-deployment with revision #3\nPod Template:\n  Labels:\tapp&#x3D;nginx\n\tpod-template-hash&#x3D;66bc5d6c8\n  Annotations:\tkubernetes.io&#x2F;change-cause: kubectl apply --filename&#x3D;nginx-deployment.yaml --record&#x3D;true\n  Containers:\n   nginx:\n    Image:\tnginx:1.161\n    Port:\t80&#x2F;TCP\n    Host Port:\t0&#x2F;TCP\n    Environment:\t&lt;none&gt;\n    Mounts:\t&lt;none&gt;\n  Volumes:\t&lt;none&gt;\n\n回滚到之前的修订版本按照下面给出的步骤将 Deployment 从当前版本回滚到以前的版本（即版本 2）\n\n撤消当前上线并回滚到以前的修订版本：\nkubectl rollout undo deployment nginx-deployment\n##################\ndeployment.apps&#x2F;nginx-deployment rolled back\n\n或者也可以使用--to-revision来回滚到特定版本：\nkubectl rollout undo deployment nginx-deployment --to-revision&#x3D;2\n检查回滚是否成功以及 Deployment 是否正在运行，运行：\nkubectl get deployment nginx-deployment\n###################\nNAME               READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment   3&#x2F;3     3            3           17h\n###################\n\nkubectl get rs\n###################\nNAME                          DESIRED   CURRENT   READY   AGE\nnginx-deployment-559d658b74   3         3         3       16h\nnginx-deployment-66b6c48dd5   0         0         0       17h\nnginx-deployment-66bc5d6c8    0         0         0       23m\n获取 Deployment 描述信息：\nkubectl describe deployment nginx-deployment\n###################\nName:                   nginx-deployment\nNamespace:              default\nCreationTimestamp:      Thu, 16 Sep 2021 09:25:41 +0000\nLabels:                 app&#x3D;nginx\nAnnotations:            deployment.kubernetes.io&#x2F;revision: 4\n                        kubernetes.io&#x2F;change-cause: kubectl apply --filename&#x3D;nginx-deployment.yaml --record&#x3D;true\nSelector:               app&#x3D;nginx\nReplicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable\nStrategyType:           RollingUpdate\nMinReadySeconds:        0\nRollingUpdateStrategy:  25% max unavailable, 25% max surge\nPod Template:\n  Labels:  app&#x3D;nginx\n  Containers:\n   nginx:\n    Image:        nginx:1.16.1 # 可以看到版本又回到1.16.1了\n    Port:         80&#x2F;TCP\n    Host Port:    0&#x2F;TCP\n    Environment:  &lt;none&gt;\n    Mounts:       &lt;none&gt;\n  Volumes:        &lt;none&gt;\nConditions:\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    NewReplicaSetAvailable\nOldReplicaSets:  &lt;none&gt;\nNewReplicaSet:   nginx-deployment-559d658b74 (3&#x2F;3 replicas created)\nEvents:\n  Type    Reason             Age   From                   Message\n  ----    ------             ----  ----                   -------\n  Normal  ScalingReplicaSet  24m   deployment-controller  Scaled up replica set nginx-deployment-66bc5d6c8 to 1\n  Normal  ScalingReplicaSet  4m6s  deployment-controller  Scaled down replica set nginx-deployment-66bc5d6c8 to 0\n\n集群缩放你可以使用如下指令缩放 Deployment：\nkubectl scale deployment&#x2F;nginx-deployment --replicas&#x3D;4\n######################\ndeployment.apps&#x2F;nginx-deployment scaled\n\n使用命令kubectl get pod查看pod个数\nnginx-deployment-559d658b74-2wdd4   1&#x2F;1     Running   0          8m40s\nnginx-deployment-559d658b74-d5sr4   1&#x2F;1     Running   0          8m41s\nnginx-deployment-559d658b74-pss2w   1&#x2F;1     Running   0          45s\nnginx-deployment-559d658b74-tcd7h   1&#x2F;1     Running   0          8m43s\n\n你可以使用下面的命令设置pod的自动缩放，并基于pods的CPU利用率选择要运行的Pods的个数\nkubectl autoscale deployment&#x2F;nginx-deployment --min&#x3D;3 --max&#x3D;10 --cpu-percent&#x3D;80\n#######################\nhorizontalpodautoscaler.autoscaling&#x2F;nginx-deployment autoscaled\n\n使用kubectl get hpa查看自动缩放设置\n映射服务，让用户可以访问kubectl expose deployment nginx-deployment --port&#x3D;80 --name nginx-service --type&#x3D;NodePort\n\n命令行各参数含义：\n\nexpose deployment：通过deployment暴露服务，后面跟deployment的名称\n–port：指定容器的端口\n–name：服务的名称\n–type：服务的类型：ClusterIP, NodePort, LoadBalancer, or ExternalName，默认是ClusterIP\n\n输出：\nservice&#x2F;nginx-service exposed\n\n或者使用nginx-service.yaml配置文件创建\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  labels:\n    run: ngxin-service\nspec:\n  selector:\n    app: nginx # 指定Pod的label\n  type: NodePort\n  ports:\n  - targetPort: 80 # 容器的端口\n    port: 80  \n\n\n执行kubectl apply -f nginx-service.yaml创建service\n使用kubectl get svc查看已暴露的服务\nNAME            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE\nkubernetes      ClusterIP   10.96.0.1       &lt;none&gt;        443&#x2F;TCP        18h\n# nginx-service 服务已成功发布并将 80 端口映射为 32381\nnginx-service   NodePort    10.103.31.252   &lt;none&gt;        80:32381&#x2F;TCP   6s\n\n查看服务详情kubectl describe service nginx-service\n#####################\nName:                     nginx-service\nNamespace:                default\nLabels:                   app&#x3D;nginx\nAnnotations:              &lt;none&gt;\nSelector:                 app&#x3D;nginx\nType:                     NodePort\nIP Family Policy:         SingleStack\nIP Families:              IPv4\nIP:                       10.103.31.252\nIPs:                      10.103.31.252\nPort:                     &lt;unset&gt;  80&#x2F;TCP\nTargetPort:               80&#x2F;TCP\nNodePort:                 &lt;unset&gt;  32381&#x2F;TCP\nEndpoints:                10.244.1.5:80,10.244.1.6:80,10.244.2.5:80\nSession Affinity:         None\nExternal Traffic Policy:  Cluster\nEvents:                   &lt;none&gt;\n\n验证是否能访问通过浏览器访问Master服务器http://&lt;Master IP&gt;:32381/\n停止服务kubectl delete service nginx-service\n\n# 输出如下\nservice &quot;nginx-service&quot; deleted\n\n","slug":50138,"date":"2021-09-16T09:15:43.000Z","categories_index":"Kubernetes","tags_index":"Kubernetes,Deployment","author_index":"zengdw"},{"id":"ddc0f00adba19563bf15acc2e2b6d65d","title":"Ubuntu20.04 安装 Kubernetes 1.22","content":"Ubuntu20.04 安装 Kubernetes 1.221、基础条件\n每台机器 2 GB 或更多的 RAM （如果少于这个数字将会影响你应用的运行内存)\n2 CPU 核或更多\n集群中的所有机器的网络彼此均能相互连接\n节点之中不可以有重复的主机名、MAC 地址或 product_uuid\n开启机器上的某些端口。请参见这里\n禁用交换分区。为了保证 kubelet 正常工作\n\n机器信息:\n\n\n\nhostname\nmaster\nnode1\nnode2\n\n\n\nIP\n192.168.5.200\n192.168.5.201\n192.168.5.202\n\n\n2、更改iptables 配置确保 br_netfilter 模块被加载。这一操作可以通过运行 lsmod | grep br_netfilter 来完成。若要显式加载该模块，可执行 sudo modprobe br_netfilter。\n为了让你的 Linux 节点上的 iptables 能够正确地查看桥接流量，你需要确保在你的 sysctl 配置中将 net.bridge.bridge-nf-call-iptables 设置为 1。例如：\ncat &lt;&lt;EOF | sudo tee &#x2F;etc&#x2F;modules-load.d&#x2F;k8s.conf\nbr_netfilter\nEOF\n\ncat &lt;&lt;EOF | sudo tee &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf\nnet.bridge.bridge-nf-call-ip6tables &#x3D; 1\nnet.bridge.bridge-nf-call-iptables &#x3D; 1\nEOF\n\nsudo sysctl --system\n\n这一操作要在3台机器上都执行。\n3、禁用交换分区swapoff -a\n\nvim &#x2F;etc&#x2F;fstab 注释掉最后一行\n\n4、修改hostname在每个节点上执行hostnamectl set-hostname 节点名称\n5、安装runtime因为最终pod都是运行在容器中的，所以这里需要安装容器运行时。这里使用Docker容器 ，安装方法看这里。3台机器都安装好后配置docker镜像加速：\nsudo mkdir -p &#x2F;etc&#x2F;docker\nsudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;\n&#123;\n  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;5z8k6du2.mirror.aliyuncs.com&quot;]\n&#125;\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n6、安装 kubeadm、kubelet 和 kubectl因为Kubernetes 的资源都在google仓库，所以我们使用阿里的镜像安装\n1.更新 apt 包索引并安装使用 Kubernetes apt 仓库所需要的包\napt update &amp;&amp; apt install -y apt-transport-https\n\n2.下载公开签名秘钥\ncurl https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F;doc&#x2F;apt-key.gpg | apt-key add - \n\n3.添加 Kubernetes apt 仓库\ncat &lt;&lt;EOF &gt;&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.list\ndeb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F; kubernetes-xenial main\nEOF \n\n4.更新 apt 包索引，安装 kubelet、kubeadm 和 kubectl，并锁定其版本\napt update\napt install -y kubelet kubeadm kubectl\napt-mark hold kubelet kubeadm kubectl\n\n这一操作要在3台机器上都执行。\n7、配置Cgroup 驱动1.配置 Docker 守护程序，尤其是使用 systemd 来管理容器的 cgroup。\nsudo mkdir &#x2F;etc&#x2F;docker\ncat &lt;&lt;EOF | sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json\n&#123;\n  &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;],\n  &quot;log-driver&quot;: &quot;json-file&quot;,\n  &quot;log-opts&quot;: &#123;\n    &quot;max-size&quot;: &quot;100m&quot;\n  &#125;,\n  &quot;storage-driver&quot;: &quot;overlay2&quot;\n&#125;\nEOF\n\n2.重新启动 Docker 并在启动时启用\nsudo systemctl enable docker\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n8、使用kubeadm创建集群8.1 先看下Kubernetes 集群需要哪些镜像kubeadm config images list\n####################\nk8s.gcr.io&#x2F;kube-apiserver:v1.22.2\nk8s.gcr.io&#x2F;kube-controller-manager:v1.22.2\nk8s.gcr.io&#x2F;kube-scheduler:v1.22.2\nk8s.gcr.io&#x2F;kube-proxy:v1.22.2\nk8s.gcr.io&#x2F;pause:3.5\nk8s.gcr.io&#x2F;etcd:3.5.0-0\nk8s.gcr.io&#x2F;coredns&#x2F;coredns:v1.8.4\n####################\n\n发现都在k8s.gcr.io这仓库里的，直接下是下不下来的。这里使用阿里的容器镜像服务,先在镜像仓库中构建出我们需要的镜像，再从镜像仓库下到本地重新打tag就能得到所需要的镜像了。直接使用下面这个脚本下载下载需要的镜像。\ndocker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-apiserver:v1.22.1\ndocker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-controller-manager:v1.22.1\ndocker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-scheduler:v1.22.1\ndocker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-proxy:v1.22.1\ndocker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;pause:3.5\ndocker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;etcd:3.5.0-0\ndocker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;coredns:v1.8.4\n\n\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-apiserver:v1.22.1 k8s.gcr.io&#x2F;kube-apiserver:v1.22.1\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-controller-manager:v1.22.1 k8s.gcr.io&#x2F;kube-controller-manager:v1.22.1\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-scheduler:v1.22.1 k8s.gcr.io&#x2F;kube-scheduler:v1.22.1\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-proxy:v1.22.1 k8s.gcr.io&#x2F;kube-proxy:v1.22.1\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;pause:3.5 k8s.gcr.io&#x2F;pause:3.5\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;etcd:3.5.0-0 k8s.gcr.io&#x2F;etcd:3.5.0-0\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;coredns:v1.8.4 k8s.gcr.io&#x2F;coredns&#x2F;coredns:v1.8.4\n\n\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-apiserver:v1.22.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-controller-manager:v1.22.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-scheduler:v1.22.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-proxy:v1.22.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;pause:3.5\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;etcd:3.5.0-0\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;coredns:v1.8.4\n\n8.2 使用kubeadm init初始化集群kubeadm init --pod-network-cidr&#x3D;10.244.0.0&#x2F;16 --kubernetes-version&#x3D;v1.22.1 # 只需要在master节点执行\n\n–pod-network-cidr：指定Pod网络插件使用的ip范围，注意Pod 网络不得与任何主机网络重叠。这里使用的是flannel\n只要出现下面的日志就表示成功了：\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME&#x2F;.kube\n  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config\n  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:\n  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.5.200:6443 --token sg48lm.lnkyzrbek8nb63co \\\n\t--discovery-token-ca-cert-hash sha256:dfe7d3ce8ac56f42862548c3b2290a70f0ffbbf2570789e648097dd0bd0fbc2a\n\n非root用户执行：\nmkdir -p $HOME&#x2F;.kube\nsudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config\nsudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config\n\nroot用户执行：\nexport KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf\n\n查看节点状态\nkubectl get node\n###########\nNAME     STATUS     ROLES                  AGE   VERSION\nubuntu   NotReady   control-plane,master   24m   v1.22.1\n\n可以看到现在节点STATUS还是NotReady。ubuntu这个是前面我忘了改master节点的hostname了\n然后安装Pod网络插件，输出日志上也有提示Run &quot;kubectl apply -f [podnetwork].yaml&quot;\nkubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;master&#x2F;Documentation&#x2F;kube-flannel.yml\n\n安装好后，等一会就能看到节点状态变成Ready了\nkubectl get node\n###########\nNAME     STATUS   ROLES                  AGE   VERSION\nubuntu   Ready    control-plane,master   25m   v1.22.1\n\n在node1，node2上执行kubeadm join 192.168.5.200:6443 --token sg48lm.lnkyzrbek8nb63co \\     --discovery-token-ca-cert-hash sha256:dfe7d3ce8ac56f42862548c3b2290a70f0ffbbf2570789e648097dd0bd0fbc2a加入集群。\n等一会后，查看node和pod的状态\nkubectl get nodes\n###########\nNAME     STATUS   ROLES                  AGE     VERSION\nnode1    Ready    &lt;none&gt;                 4m57s   v1.22.1\nnode2    Ready    &lt;none&gt;                 4m45s   v1.22.1\nubuntu   Ready    control-plane,master   40m     v1.22.1\n###########\n\nkubectl get pod -n kube-system -o wide\n###########\nNAME                             READY   STATUS    RESTARTS   AGE     IP              NODE     NOMINATED NODE   READINESS GATES\ncoredns-78fcd69978-nvj8f         1&#x2F;1     Running   0          40m     10.244.0.2      ubuntu   &lt;none&gt;           &lt;none&gt;\ncoredns-78fcd69978-vxds6         1&#x2F;1     Running   0          40m     10.244.0.3      ubuntu   &lt;none&gt;           &lt;none&gt;\netcd-ubuntu                      1&#x2F;1     Running   0          40m     192.168.5.200   ubuntu   &lt;none&gt;           &lt;none&gt;\nkube-apiserver-ubuntu            1&#x2F;1     Running   0          40m     192.168.5.200   ubuntu   &lt;none&gt;           &lt;none&gt;\nkube-controller-manager-ubuntu   1&#x2F;1     Running   0          40m     192.168.5.200   ubuntu   &lt;none&gt;           &lt;none&gt;\nkube-flannel-ds-59m8w            1&#x2F;1     Running   0          5m30s   192.168.5.201   node1    &lt;none&gt;           &lt;none&gt;\nkube-flannel-ds-jcfwn            1&#x2F;1     Running   0          5m18s   192.168.5.202   node2    &lt;none&gt;           &lt;none&gt;\nkube-flannel-ds-qvsn8            1&#x2F;1     Running   0          16m     192.168.5.200   ubuntu   &lt;none&gt;           &lt;none&gt;\nkube-proxy-59zx2                 1&#x2F;1     Running   0          5m30s   192.168.5.201   node1    &lt;none&gt;           &lt;none&gt;\nkube-proxy-6dkwk                 1&#x2F;1     Running   0          40m     192.168.5.200   ubuntu   &lt;none&gt;           &lt;none&gt;\nkube-proxy-knn8c                 1&#x2F;1     Running   0          5m18s   192.168.5.202   node2    &lt;none&gt;           &lt;none&gt;\nkube-scheduler-ubuntu            1&#x2F;1     Running   0          40m     192.168.5.200   ubuntu   &lt;none&gt;           &lt;none&gt;\n###########\n\n可以看到全都是Ready/Running状态了，至此我们的Kubernetes 集群就安装好了。\n","slug":36779,"date":"2021-09-16T05:59:05.000Z","categories_index":"","tags_index":"Kubernetes","author_index":"zengdw"},{"id":"6fbfd3f92e094317427a7de3addb6e33","title":"JavaScript常用函数封装方法","content":"JavaScript常用函数封装方法1、加载js || css || styleconst loadRes &#x3D; function(name, type, fn) &#123; &#x2F;&#x2F; 加载js || css || style\n  let ref\n  if (type &#x3D;&#x3D;&#x3D; &#39;js&#39;) &#123; &#x2F;&#x2F; 外部js\n    ref &#x3D; document.createElement(&#39;script&#39;)\n    ref.setAttribute(&#39;type&#39;, &#39;text&#x2F;JavaScript&#39;)\n    ref.setAttribute(&#39;src&#39;, name)\n  &#125; else if (type &#x3D;&#x3D;&#x3D; &#39;css&#39;) &#123; &#x2F;&#x2F; 外部css\n    ref &#x3D; document.createElement(&#39;link&#39;)\n    ref.setAttribute(&#39;rel&#39;, &#39;stylesheet&#39;)\n    ref.setAttribute(&#39;type&#39;, &#39;text&#x2F;css&#39;)\n    ref.setAttribute(&#39;href&#39;, name)\n  &#125; else if (type &#x3D;&#x3D;&#x3D; &#39;style&#39;) &#123; &#x2F;&#x2F; style\n    ref &#x3D; document.createElement(&#39;style&#39;)\n    ref.innerhtml &#x3D; name\n  &#125;\n  if (typeof ref !&#x3D;&#x3D; &#39;undefined&#39;) &#123;\n    document.getElementsByTagName(&#39;head&#39;)[0].appendChild(ref)\n    ref.onload &#x3D; function() &#123; &#x2F;&#x2F; 加载完成执行\n      typeof fn &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; fn()\n    &#125;\n  &#125;\n&#125;\n\n2、取url参数\n正则方式获取\nconst getUrlParam &#x3D; function(name) &#123; \n  let reg &#x3D; new RegExp(&#39;(^|&amp;?)&#39; + name + &#39;&#x3D;([^&amp;]*)(&amp;|$)&#39;, &#39;i&#39;)\n  let r &#x3D; window.location.href.substr(1).match(reg)\n  if (r !&#x3D; null) &#123;\n    return decodeURI(r[2])\n  &#125;\n  return undefined\n&#125;\nURLSearchParams()函数\nfunction getUrlParam(name) &#123;\n  let params &#x3D; new URLSearchParams(window.location.search)\n  return params.get(name)\n&#125;\nsplit拆分\nfunction getUrlParam(name) &#123;\n  let params &#x3D; window.location.search\n  let vars &#x3D; params.substr(1).split(&quot;&amp;&quot;)\n  for (var i &#x3D; 0; i &lt; vars.length; i++) &#123;\n    let pair &#x3D; vars[i].split(&quot;&#x3D;&quot;)\n    if (pair[0] &#x3D;&#x3D; name) &#123; return pair[1] &#125;\n  &#125;\n  return &#39;&#39;\n&#125;\n\n3、cookie操作【set，get，del】   const cookie &#x3D; &#123; \n  set: function(name, value, day) &#123;\n    let oDate &#x3D; new Date()\n    oDate.setDate(oDate.getDate() + (day || 30))\n    document.cookie &#x3D; name + &#39;&#x3D;&#39; + value + &#39;;expires&#x3D;&#39; + oDate + &quot;; path&#x3D;&#x2F;;&quot;\n  &#125;,\n  get: function(name) &#123;\n    let str &#x3D; document.cookie\n    let arr &#x3D; str.split(&#39;; &#39;)\n    for (let i &#x3D; 0; i &lt; arr.length; i++) &#123;\n      let newArr &#x3D; arr[i].split(&#39;&#x3D;&#39;)\n      if (newArr[0] &#x3D;&#x3D;&#x3D; name) &#123;\n        return newArr[1]\n      &#125;\n    &#125;\n  &#125;,\n  del: function(name) &#123;\n    this.set(name, &#39;&#39;, -1)\n  &#125;\n&#125;\n\n4、时间格式化const formatDate &#x3D; function(fmt, date) &#123; \n  if (typeof date !&#x3D;&#x3D; &#39;object&#39;) &#123;\n    date &#x3D; !date ? new Date() : new Date(date)\n  &#125;\n  var o &#x3D; &#123;\n    &#39;M+&#39;: date.getMonth() + 1, &#x2F;&#x2F; 月份\n    &#39;d+&#39;: date.getDate(), &#x2F;&#x2F; 日\n    &#39;h+&#39;: date.getHours(), &#x2F;&#x2F; 小时\n    &#39;m+&#39;: date.getMinutes(), &#x2F;&#x2F; 分\n    &#39;s+&#39;: date.getSeconds(), &#x2F;&#x2F; 秒\n    &#39;q+&#39;: Math.floor((date.getMonth() + 3) &#x2F; 3), &#x2F;&#x2F; 季度\n    &#39;S&#39;: date.getMilliseconds() &#x2F;&#x2F; 毫秒\n  &#125;\n  if (&#x2F;(y+)&#x2F;.test(fmt)) &#123;\n    fmt &#x3D; fmt.replace(RegExp.$1, (date.getFullYear() + &#39;&#39;).substr(4 - RegExp.$1.length))\n  &#125;\n  for (var k in o) &#123;\n    if (new RegExp(&#39;(&#39; + k + &#39;)&#39;).test(fmt)) &#123;\n      fmt &#x3D; fmt.replace(RegExp.$1, (RegExp.$1.length &#x3D;&#x3D;&#x3D; 1) ? (o[k]) : ((&#39;00&#39; + o[k]).substr((&#39;&#39; + o[k]).length)))\n    &#125;\n  &#125;\n  return fmt\n&#125;\n\n5、base64图片下载功能\nconst downloadFile &#x3D; function(base64, fileName) &#123; &#x2F;&#x2F;base64图片下载功能\n  let base64ToBlob &#x3D; function(code) &#123;\n    let parts &#x3D; code.split(&#39;;base64,&#39;);\n    let contentType &#x3D; parts[0].split(&#39;:&#39;)[1];\n    let raw &#x3D; window.atob(parts[1]);\n    let rawLength &#x3D; raw.length;\n    let uInt8Array &#x3D; new Uint8Array(rawLength);\n    for (let i &#x3D; 0; i &lt; rawLength; ++i) &#123;\n      uInt8Array[i] &#x3D; raw.charCodeAt(i);\n    &#125;\n    return new Blob([uInt8Array], &#123;\n      type: contentType\n    &#125;);\n  &#125;;\n  let aLink &#x3D; document.createElement(&#39;a&#39;);\n  let blob &#x3D; base64ToBlob(base64); &#x2F;&#x2F;new Blob([content]);\n  let evt &#x3D; document.createEvent(&quot;HTMLEvents&quot;);\n  evt.initEvent(&quot;click&quot;, true, true); &#x2F;&#x2F;initEvent不加后两个参数在FF下会报错  事件类型，是否冒泡，是否阻止浏览器的默认行为\n  aLink.download &#x3D; fileName;\n  aLink.href &#x3D; URL.createObjectURL(blob);\n  aLink.click();\n&#125;\n\n6、图片地址转base64&#x2F;&#x2F;传入图片路径，返回base64，使用getBase64(url).then(function(base64)&#123;&#125;,function(err)&#123;&#125;);\nconst getBase64 &#x3D; function(img) &#123;  \n  let getBase64Image &#x3D; function(img, width, height) &#123; &#x2F;&#x2F;width、height调用时传入具体像素值，控制大小,不传则默认图像大小\n    let canvas &#x3D; document.createElement(&quot;canvas&quot;);\n    canvas.width &#x3D; width ? width : img.width;\n    canvas.height &#x3D; height ? height : img.height;\n    let ctx &#x3D; canvas.getContext(&quot;2d&quot;);\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n    let dataURL &#x3D; canvas.toDataURL();\n    return dataURL;\n  &#125;\n  let image &#x3D; new Image();\n  image.crossOrigin &#x3D; &#39;&#39;;\n  image.src &#x3D; img;\n  let deferred &#x3D; $.Deferred();\n  if (img) &#123;\n    image.onload &#x3D; function() &#123;\n      deferred.resolve(getBase64Image(image));\n    &#125;\n    return deferred.promise();\n  &#125;\n&#125;\n\n7、生成随机数范围&#x2F;&#x2F; 生成随机数范围\nconst random &#x3D; function(min, max) &#123; \n  if (arguments.length &#x3D;&#x3D;&#x3D; 2) &#123;\n    return Math.floor(min + Math.random() * ((max + 1) - min))\n  &#125; else &#123;\n    return null\n  &#125;\n&#125;\n\n8、过滤html代码const filterTag &#x3D; function(str) &#123;\n  str &#x3D; str.replace(&#x2F;&amp;&#x2F;ig, &#39;&amp;&#39;)\n  str &#x3D; str.replace(&#x2F;&lt;&#x2F;ig, &#39;&lt;&#39;)\n  str &#x3D; str.replace(&#x2F;&gt;&#x2F;ig, &#39;&gt;&#39;)\n  str &#x3D; str.replace(&#39; &#39;, &#39; &#39;)\n  return str\n&#125;\n\n9、去除字符串空格&#x2F;&#x2F; 去除空格， type:  1-所有空格  2-前后空格  3-前空格 4-后空格\nconst trim &#x3D; function(str, type) &#123; \n  type &#x3D; type || 1\n  switch (type) &#123;\n    case 1:\n      return str.replace(&#x2F;\\s+&#x2F;g, &#39;&#39;)\n    case 2:\n      return str.replace(&#x2F;(^\\s*)|(\\s*$)&#x2F;g, &#39;&#39;)\n    case 3:\n      return str.replace(&#x2F;(^\\s*)&#x2F;g, &#39;&#39;)\n    case 4:\n      return str.replace(&#x2F;(\\s*$)&#x2F;g, &#39;&#39;)\n    default:\n      return str\n  &#125;\n&#125;\n\n10、常用正则验证 &#x2F;&#x2F; 常用正则验证，注意type大小写\nconst checkStr &#x3D; function(str, type) &#123;\n  switch (type) &#123;\n    case &#39;phone&#39;: &#x2F;&#x2F; 手机号码\n      return &#x2F;^1[3|4|5|6|7|8|9][0-9]&#123;9&#125;$&#x2F;.test(str)\n    case &#39;tel&#39;: &#x2F;&#x2F; 座机\n      return &#x2F;^(0\\d&#123;2,3&#125;-\\d&#123;7,8&#125;)(-\\d&#123;1,4&#125;)?$&#x2F;.test(str)\n    case &#39;card&#39;: &#x2F;&#x2F; 身份证\n      return &#x2F;(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)&#x2F;.test(str)\n    case &#39;pwd&#39;: &#x2F;&#x2F; 密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线\n      return &#x2F;^[a-zA-Z]\\w&#123;5,17&#125;$&#x2F;.test(str)\n    case &#39;postal&#39;: &#x2F;&#x2F; 邮政编码\n      return &#x2F;[1-9]\\d&#123;5&#125;(?!\\d)&#x2F;.test(str)\n    case &#39;QQ&#39;: &#x2F;&#x2F; QQ号\n      return &#x2F;^[1-9][0-9]&#123;4,9&#125;$&#x2F;.test(str)\n    case &#39;email&#39;: &#x2F;&#x2F; 邮箱\n      return &#x2F;^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$&#x2F;.test(str)\n    case &#39;money&#39;: &#x2F;&#x2F; 金额(小数点2位)\n      return &#x2F;^\\d*(?:\\.\\d&#123;0,2&#125;)?$&#x2F;.test(str)\n    case &#39;URL&#39;: &#x2F;&#x2F; 网址\n      return &#x2F;(http|ftp|https):\\&#x2F;\\&#x2F;[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^&#x3D;%&amp;:&#x2F;~\\+#]*[\\w\\-\\@?^&#x3D;%&amp;&#x2F;~\\+#])?&#x2F;.test(str)\n    case &#39;IP&#39;: &#x2F;&#x2F; IP\n      return &#x2F;((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))&#x2F;.test(str)\n    case &#39;date&#39;: &#x2F;&#x2F; 日期时间\n      return &#x2F;^(\\d&#123;4&#125;)\\-(\\d&#123;2&#125;)\\-(\\d&#123;2&#125;) (\\d&#123;2&#125;)(?:\\:\\d&#123;2&#125;|:(\\d&#123;2&#125;):(\\d&#123;2&#125;))$&#x2F;.test(str) ||\n        &#x2F;^(\\d&#123;4&#125;)\\-(\\d&#123;2&#125;)\\-(\\d&#123;2&#125;)$&#x2F;.test(str)\n    case &#39;number&#39;: &#x2F;&#x2F; 数字\n      return &#x2F;^[0-9]$&#x2F;.test(str)\n    case &#39;english&#39;: &#x2F;&#x2F; 英文\n      return &#x2F;^[a-zA-Z]+$&#x2F;.test(str)\n    case &#39;chinese&#39;: &#x2F;&#x2F; 中文\n      return &#x2F;^[\\u4E00-\\u9FA5]+$&#x2F;.test(str)\n    case &#39;lower&#39;: &#x2F;&#x2F; 小写\n      return &#x2F;^[a-z]+$&#x2F;.test(str)\n    case &#39;upper&#39;: &#x2F;&#x2F; 大写\n      return &#x2F;^[A-Z]+$&#x2F;.test(str)\n    case &#39;HTML&#39;: &#x2F;&#x2F; HTML标记\n      return &#x2F;&lt;(&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&#39;&quot;&gt;])*&gt;&#x2F;.test(str)\n    default:\n      return true\n  &#125;\n&#125;\n\n","slug":19543,"date":"2021-09-16T03:24:59.000Z","categories_index":"前端","tags_index":"js,常用方法","author_index":"zengdw"},{"id":"2ccfc909aebeafe15ee74b64b3820d5d","title":"为什么Java中1000==1000为false，而100==100为true？","content":"为什么Java中1000 == 1000为false，而100 == 100为true？主要是Integer内部类IntegerCache缓存了从 - 128 到 127 之间的所有的整数对象\nprivate static class IntegerCache &#123;\n  static final int low &#x3D; -128;\n  static final int high;\n  static final Integer cache[];\n\n  static &#123;\n    &#x2F;&#x2F; high value may be configured by property\n    int h &#x3D; 127;\n\t\t...\n    high &#x3D; h;\n\n    cache &#x3D; new Integer[(high - low) + 1];\n    int j &#x3D; low;\n    for(int k &#x3D; 0; k &lt; cache.length; k++)\n      cache[k] &#x3D; new Integer(j++);\n    \n    assert IntegerCache.high &gt;&#x3D; 127;\n  &#125;\n\n  private IntegerCache() &#123;&#125;\n&#125;\n\n在声明Integer a = 100时，实际是调用了Integer.valueOf(int i)，直接从缓存取值，从而不管声明几个变量都是对应的同一个对象。\npublic static Integer valueOf(int i) &#123;\n  if (i &gt;&#x3D; IntegerCache.low &amp;&amp; i &lt;&#x3D; IntegerCache.high)\n    return IntegerCache.cache[i + (-IntegerCache.low)];\n  return new Integer(i);\n&#125;\n\n参考：为什么Java中1000 == 1000为false，而100 == 100为true？\n","slug":42461,"date":"2021-08-02T08:00:15.000Z","categories_index":"转载","tags_index":"java,基础","author_index":"zengdw"},{"id":"f5148e2ec46f11185a88064560b60cb3","title":"XMLHttpRequest下载文件","content":"使用XMLHttpRequest下载文件\nconst xhr &#x3D; new XMLHttpRequest()\nxhr.open(&#39;get&#39;, &#39;下载链接&#39;)\nxhr.responseType &#x3D; &#39;blob&#39;\nxhr.onreadystatechange &#x3D; function () &#123;\n  if (xhr.readyState &#x3D;&#x3D;&#x3D; XMLHttpRequest.DONE &amp;&amp; xhr.status &#x3D;&#x3D;&#x3D; 200) &#123;\n    saveAs(xhr.response, &#39;文件名称&#39;)\n  &#125;\n&#125;\nxhr.send();\n\nfunction saveAs(data, name) &#123;\n  var urlObject &#x3D; window.URL || window.webkitURL || window;\n  const export_blob &#x3D; new Blob([data]);\n  var save_link &#x3D; document.createElementNS(&#39;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&#39;, &#39;a&#39;)\n  save_link.href &#x3D; urlObject.createObjectURL(export_blob);\n  save_link.download &#x3D; name;\n  save_link.click();\n&#125;\n\n","slug":52642,"date":"2021-07-16T17:03:02.000Z","categories_index":"前端","tags_index":"js","author_index":"zengdw"},{"id":"3c992e7574b48536b50666714703da0d","title":"git常用命令","content":"git推送本地分支到远程git push -u origin &lt;分支名称&gt;\n\ngit 删除远程分支git push origin --delete &lt;分支名称&gt;\n\nGit报错-refusing to merge unrelated histories本地仓库第一次推送到远程仓库时报错，错误如下：\nfatal: refusing to merge unrelated histories(拒绝合并不相关的历史)\n出现这问题的主要原因是当前本地仓库和远程仓库还是独立的两个仓库。如果之前是直接clone远程仓库建立的本地仓库则不会出现这个问题。而且如果远程仓库没有提交历史，是一个全新的仓库也不会有这问题。\n解决办法：\ngit pull origin master --allow-unrelated-histories\n\n--allow-unrelated-histories命令可以合并两个独立仓库的提交历史。之后再git push就不会有问题了。\n创建新分支并切换到分支git checkout -b &lt;分支名称&gt;\n\n新建分支并关联远程分支git checkout -b &lt;本地分支&gt; origin&#x2F;&lt;远程分支&gt;\n\n\n\n","slug":953,"date":"2021-06-25T03:22:52.000Z","categories_index":"软件工具","tags_index":"git","author_index":"zengdw"},{"id":"6f3260d8368b13047156363f95700631","title":"yarn常用命令","content":"yarn配置信息查看yarn config list\n\n查询安装依赖的全局路径yarn global bin\n&#x2F;&#x2F; C:\\Users\\zengd\\AppData\\Local\\Yarn\\bin\n\n修改全局 bin 位置yarn config set prefix &quot;D:\\software\\Yarn\\Data\\&quot;\n\n修改缓存位置yarn config set cache-folder &quot;D:\\software\\Yarn\\cache-folder&quot;\n\n修改全局安装位置yarn config set global-folder &quot;D:\\software\\Yarn\\global-folder&quot;\n\n添加依赖yarn global add  xxx      安装全局依赖\nyarn add xxx              安装到dependencies\nyarn add xxx -D           安装到devDependencies\n\n更新项目依赖yarn upgrade-interactive --latest\n\n&#x2F;&#x2F; 需要手动选择升级的依赖包，按空格键选择，a 键切换所有，i 键反选选择，上下键切换依赖项\n\n查看全局安装的依赖yarn global list\n\n查看yarn全局安装位置yarn global dir\n\n\n\n","slug":13025,"date":"2021-06-24T09:32:01.000Z","categories_index":"软件工具","tags_index":"yarn","author_index":"zengdw"},{"id":"f9dec9d80bbb9ed9aeded48053152e85","title":"logkack日志配置文件","content":"logkack-spring.xml\n&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;configuration&gt;\n\n  &lt;!-- magenta:洋红 --&gt;\n  &lt;!-- boldMagenta:粗红--&gt;\n  &lt;!-- cyan:青色 --&gt;\n  &lt;!-- white:白色 --&gt;\n  &lt;!-- magenta:洋红 --&gt;\n  &lt;springProperty name&#x3D;&quot;LOG_PATH&quot; source&#x3D;&quot;logging.path&quot; defaultValue&#x3D;&quot;.&#x2F;logs&quot; &#x2F;&gt;\n  &lt;property name&#x3D;&quot;CONSOLE_LOG_PATTERN&quot; value&#x3D;&quot;%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) |%highlight(%thread %-5level) |%green(%logger:%line) |%highlight(%msg%n)&quot;&#x2F;&gt;\n  &lt;property name&#x3D;&quot;FILE_LOG_PATTERN&quot; value&#x3D;&quot;%date&#123;yyyy-MM-dd HH:mm:ss&#125; |%thread %-5level |%logger:%line |%msg%n&quot;&#x2F;&gt;\n  &lt;!-- 模块名称， 影响日志配置名，日志文件名 --&gt;\n  &lt;property name&#x3D;&quot;log.base&quot; value&#x3D;&quot;$&#123;LOG_PATH&#125;&quot;&#x2F;&gt;\n\n  &lt;springProfile name&#x3D;&quot;prod&quot;&gt;\n    &lt;!--&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;写入文件&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;--&gt;\n    &lt;appender name&#x3D;&quot;logFile&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\n      &lt;File&gt;$&#123;log.base&#125;&#x2F;log&#x2F;log.log&lt;&#x2F;File&gt;\n      &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;&lt;!-- 不接受ERROR日志 --&gt;\n        &lt;level&gt;ERROR&lt;&#x2F;level&gt;\n        &lt;onMatch&gt;DENY&lt;&#x2F;onMatch&gt;\n        &lt;onMismatch&gt;NEUTRAL&lt;&#x2F;onMismatch&gt;\n      &lt;&#x2F;filter&gt;\n      &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;&lt;!-- 不接受DEBUG日志 --&gt;\n        &lt;level&gt;DEBUG&lt;&#x2F;level&gt;\n        &lt;onMatch&gt;DENY&lt;&#x2F;onMatch&gt;\n        &lt;onMismatch&gt;NEUTRAL&lt;&#x2F;onMismatch&gt;\n      &lt;&#x2F;filter&gt;\n      &lt;encoder&gt;\n        &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;&#x2F;pattern&gt;\n        &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt;\n      &lt;&#x2F;encoder&gt;\n      &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;\n        &lt;!-- 按天回滚 daily --&gt;\n        &lt;fileNamePattern&gt;$&#123;log.base&#125;&#x2F;log&#x2F;log-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;&#x2F;fileNamePattern&gt;\n        &lt;!-- 日志最大的历史 30天 --&gt;\n        &lt;maxHistory&gt;30&lt;&#x2F;maxHistory&gt;\n        &lt;!--日志文件在大于100MB时会自动生成另一个文件--&gt;\n        &lt;TimeBasedFileNamingAndTriggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;\n          &lt;maxFileSize&gt;100MB&lt;&#x2F;maxFileSize&gt;\n        &lt;&#x2F;TimeBasedFileNamingAndTriggeringPolicy&gt;\n      &lt;&#x2F;rollingPolicy&gt;\n    &lt;&#x2F;appender&gt;\n    &lt;!--&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;写入文件&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;--&gt;\n\n    &lt;!--&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;异常日志&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;--&gt;\n    &lt;appender name&#x3D;&quot;errorFile&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\n      &lt;file&gt;$&#123;log.base&#125;&#x2F;error&#x2F;error.log&lt;&#x2F;file&gt;\n      &lt;!-- 只打印错误日志 --&gt;\n      &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;\n        &lt;level&gt;ERROR&lt;&#x2F;level&gt;\n        &lt;onMatch&gt;ACCEPT&lt;&#x2F;onMatch&gt;\n        &lt;onMismatch&gt;DENY&lt;&#x2F;onMismatch&gt;\n      &lt;&#x2F;filter&gt;\n      &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;\n        &lt;fileNamePattern&gt;$&#123;log.base&#125;&#x2F;error&#x2F;error-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;&#x2F;fileNamePattern&gt;\n        &lt;maxHistory&gt;30&lt;&#x2F;maxHistory&gt;\n        &lt;TimeBasedFileNamingAndTriggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;\n          &lt;maxFileSize&gt;100MB&lt;&#x2F;maxFileSize&gt;\n        &lt;&#x2F;TimeBasedFileNamingAndTriggeringPolicy&gt;\n      &lt;&#x2F;rollingPolicy&gt;\n      &lt;encoder&gt;\n        &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;&#x2F;pattern&gt;\n        &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt;\n      &lt;&#x2F;encoder&gt;\n    &lt;&#x2F;appender&gt;\n    &lt;!--&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;异常日志&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;--&gt;\n  &lt;&#x2F;springProfile&gt;\n\n  &lt;springProfile name&#x3D;&quot;dev&quot;&gt;\n    &lt;!--&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;控制台&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;--&gt;\n    &lt;appender name&#x3D;&quot;stdout&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n      &lt;encoder&gt;\n        &lt;pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;&#x2F;pattern&gt;\n      &lt;&#x2F;encoder&gt;\n    &lt;&#x2F;appender&gt;\n    &lt;!--&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;控制台&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;--&gt;\n  &lt;&#x2F;springProfile&gt;\n\n  &lt;springProfile name&#x3D;&quot;prod&quot;&gt;\n    &lt;root level&#x3D;&quot;INFO&quot;&gt;\n      &lt;appender-ref ref&#x3D;&quot;logFile&quot;&#x2F;&gt;\n      &lt;appender-ref ref&#x3D;&quot;errorFile&quot;&#x2F;&gt;\n    &lt;&#x2F;root&gt;\n  &lt;&#x2F;springProfile&gt;\n\n  &lt;springProfile name&#x3D;&quot;dev&quot;&gt;\n    &lt;logger name&#x3D;&quot;com.zengdw&quot; level&#x3D;&quot;debug&quot; &#x2F;&gt;\n    &lt;root level&#x3D;&quot;INFO&quot;&gt;\n      &lt;appender-ref ref&#x3D;&quot;stdout&quot;&#x2F;&gt;\n    &lt;&#x2F;root&gt;\n  &lt;&#x2F;springProfile&gt;\n&lt;&#x2F;configuration&gt;\n\n","slug":22012,"date":"2021-03-23T07:14:20.000Z","categories_index":"java","tags_index":"logback","author_index":"zengdw"},{"id":"c38eff67b0e937e596e547c6e75bdff6","title":"oauth2认证服务配置","content":"1、安全配置@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123;\n    @Resource\n    private UserDetailsService userDetailsService;\n\n    @Override\n    @Bean\n    protected AuthenticationManager authenticationManager() throws Exception &#123;\n        return super.authenticationManager();\n    &#125;\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;\n        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());\n    &#125;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n        http.authorizeRequests()\n                .anyRequest().authenticated()\n                .and()\n                .formLogin().permitAll()\n                .and()\n                .csrf().disable();\n    &#125;\n\n    @Bean\n    public PasswordEncoder passwordEncoder() &#123;\n        return new BCryptPasswordEncoder();\n    &#125;\n&#125;\n\n2、认证服务器配置@Configuration\n&#x2F;&#x2F;指明这是一个认证服务器\n@EnableAuthorizationServer\npublic class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter &#123;\n    @Resource\n    private AuthenticationManager authenticationManager;\n    @Resource\n    private DataSource dataSource;\n\n    &#x2F;**\n     * 第三方客户端配置\n     *&#x2F;\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception &#123;\n        clients.withClientDetails(detailsService());\n    &#125;\n\n\t&#x2F;**\n     * 端点权限配置\n     *&#x2F;\n    @Override\n    public void configure(AuthorizationServerSecurityConfigurer security) &#123;\n\t\tsecurity.checkTokenAccess(&quot;permitAll()&quot;)\n                .tokenKeyAccess(&quot;permitAll()&quot;)\n                &#x2F;&#x2F;允许使用form表单提交\n                .allowFormAuthenticationForClients();\n    &#125;\n\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) &#123;\n\t\t\t\t&#x2F;&#x2F;授权码模式获取token必须要配置authenticationManager\n\t\tendpoints.authenticationManager(authenticationManager)\n                &#x2F;&#x2F;token储存位置\n                .tokenStore(new JdbcTokenStore(dataSource))\n                &#x2F;&#x2F;使用刷新token\n                .reuseRefreshTokens(true)\n                &#x2F;&#x2F;授权码模式 code存放在内存中\n                .authorizationCodeServices(new JdbcAuthorizationCodeServices(dataSource));\n    &#125;\n\n    @Bean\n    public ClientDetailsService detailsService()&#123;\n        return new JdbcClientDetailsService(dataSource);\n    &#125;\n&#125;\n\n","slug":37106,"date":"2020-11-05T06:22:12.000Z","categories_index":"java","tags_index":"spring,oauth2","author_index":"zengdw"},{"id":"08a5a1672aa09760d3d6299b9461747e","title":"oauth2获取token的4种模式","content":"1、授权码模式（authorization_code）1.1 获取code/oauth/authorize?client_id=client1&amp;redirect_uri=https://www.baidu.com/&amp;response_type=code\n1.2 获取token&#x2F;oauth&#x2F;token\n参数:\n&#123;\n\tclient_id:\n\tclient_secret:\n\tgrant_type: &quot;authorization_code&quot;\n\tredirect_uri:\n\tusername:\n\tpassword:\n\tcode:\n&#125;\n\n2、密码模式（password）2.1 获取token&#x2F;oauth&#x2F;token\n参数:\n&#123;\n\tclient_id:\n\tclient_secret:\n\tgrant_type: &quot;password&quot;\n\tredirect_uri:\n\tusername:\n\tpassword:\n&#125;\n\n3、客户端模式（client_credentials）3.1 获取token&#x2F;oauth&#x2F;token\n参数:\n&#123;\n\tclient_id:\n\tclient_secret:\n\tgrant_type: &quot;client_credentials&quot;\n\tredirect_uri:\n&#125;\n\n4、简单模式（implicit）4.1 获取token/oauth/authorize?client_id=client1&amp;redirect_uri=https://www.baidu.com/&amp;response_type=token\n","slug":33303,"date":"2020-11-05T06:01:54.000Z","categories_index":"java","tags_index":"spring,oauth2","author_index":"zengdw"},{"id":"3a20f9ead7abf255a8999dd2c6eebc60","title":"获取用户的真实IP","content":"&#x2F;**\n * 获取用户的真实ip\n * @Date: 2020&#x2F;10&#x2F;12 17:31\n * @Version: 1.0\n *&#x2F;\npublic class IpUtils &#123;\n    public static String getRealIp(HttpServletRequest request) &#123;\n        String ipAddress &#x3D; request.getHeader(&quot;x-forwarded-for&quot;);\n        if(ipAddress &#x3D;&#x3D; null || ipAddress.length() &#x3D;&#x3D;0 || &quot;unknown&quot;.equals(ipAddress))&#123;\n            ipAddress &#x3D; request.getHeader(&quot;Proxy-Client-IP&quot;);\n        &#125;\n        if (ipAddress &#x3D;&#x3D; null || ipAddress.length() &#x3D;&#x3D; 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;\n            ipAddress &#x3D; request.getHeader(&quot;Proxy-Client-IP&quot;);\n        &#125;\n        if(ipAddress &#x3D;&#x3D; null || ipAddress.length() &#x3D;&#x3D; 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;\n            ipAddress &#x3D; request.getHeader(&quot;WL-Proxy-Client-IP&quot;);\n        &#125;\n        if (StringUtils.isEmpty(ipAddress) || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;\n            ipAddress &#x3D; request.getHeader(&quot;HTTP_CLIENT_IP&quot;);\n        &#125;\n        if (StringUtils.isEmpty(ipAddress) || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;\n            ipAddress &#x3D; request.getHeader(&quot;HTTP_X_FORWARDED_FOR&quot;);\n        &#125;\n        if (ipAddress &#x3D;&#x3D; null || ipAddress.length() &#x3D;&#x3D; 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;\n            ipAddress &#x3D; request.getHeader(&quot;X-Real-IP&quot;);\n        &#125;\n        if(ipAddress &#x3D;&#x3D; null || ipAddress.length() &#x3D;&#x3D; 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;\n            ipAddress &#x3D; request.getRemoteAddr();\n            if(&quot;127.0.0.1&quot;.equals(ipAddress) || &quot;0:0:0:0:0:0:0:1&quot;.equals(ipAddress))&#123;\n                &#x2F;&#x2F;根据网卡取本机配置的IP\n                InetAddress inet&#x3D;null;\n                try &#123;\n                    inet &#x3D; InetAddress.getLocalHost();\n                &#125; catch (UnknownHostException e) &#123;\n                    e.printStackTrace();\n                &#125;\n                ipAddress&#x3D; inet.getHostAddress();\n            &#125;\n        &#125;\n        &#x2F;&#x2F;对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照&#39;,&#39;分割\n        &#x2F;&#x2F;&quot;***.***.***.***&quot;.length() &#x3D; 15\n        if(ipAddress!&#x3D;null &amp;&amp; ipAddress.length()&gt;15)&#123;\n            if(ipAddress.indexOf(&quot;,&quot;)&gt;0)&#123;\n                ipAddress &#x3D; ipAddress.substring(0,ipAddress.indexOf(&quot;,&quot;));\n            &#125;\n        &#125;\n        return ipAddress;\n    &#125;\n&#125;\n\n","slug":6899,"date":"2020-10-13T02:29:30.000Z","categories_index":"常用工具类","tags_index":"ip","author_index":"zengdw"},{"id":"34ee5f9776190da84e997dce1e66c72e","title":"修改powerDesigner生成mysql关键字默认双引号问题","content":"在powerDesigner中设计完数据表后，执行generate database时生成的sql中如果有表的字段是关键字时可能会出现双引号的问题。\n\n只需修改下面这个地方，在生成sql时就是替换为反引号\n\n","slug":58587,"date":"2020-09-23T02:47:48.000Z","categories_index":"软件工具","tags_index":"powerDesigner,mysql","author_index":"zengdw"},{"id":"32a5e6863115b0ca6ae97605b6a79f16","title":"skywalking安装使用","content":"skywalking简介\n\n\n\n\n\n\n\n\n分布式系统的应用程序性能监视工具，专为微服务、云原生架构和基于容器（Docker、K8s、Mesos）架构而设计。\nskywalking官网     sklwalking下载地址\n环境搭建1、下载解压后的文件结构：\n2、修改后端配置文件apache-skywalking-apm-bin\\config\\application.yml\n启动方式，默认单机启动\n\nHTTP和RPC地址和端口\n\n数据存储位置，默认H2。可选es，es7，mysql\n\n3、UI项目配置文件apache-skywalking-apm-bin\\webapp\\webapp.yml\n\n4、启动skywalking进入apache-skywalking-apm-bin\\bin文件夹\n\n至此skywalking环境就搭建成功。在浏览器输入http://127.0.0.1:8080地址后就能看到UI界面\n探针配置文件探针配置文件apache-skywalking-apm-bin\\agent\\config\\agent.config\n# The agent namespace\n# agent.namespace&#x3D;$&#123;SW_AGENT_NAMESPACE:default-namespace&#125;\n\n# The service name in UI\n# 在UI界面显示的应用名字, 可以在配置文件中修改 Your_ApplicationName 为每个应用的名称\n# 但在配置文件中修改就需要 agent 文件夹每个应用要复制一份\nagent.service_name&#x3D;$&#123;SW_AGENT_NAME:Your_ApplicationName&#125;\n\n# Backend service addresses.\n# 探针数字上传地址，为上面后端配置文件中的RPC地址\ncollector.backend_service&#x3D;$&#123;SW_AGENT_COLLECTOR_BACKEND_SERVICES:127.0.0.1:11800&#125;\n\n只需确保这2个配置就行，其余可以默认\n配置覆盖前面在配置应用名称时是直接修改的配置文件，但是每个应用都需要复制一份agent文件，这显然不可取。可以使用skywalking提供的配置覆盖功能通过启动命令动态指定要修改的配置，这样agent就只需要一份。\n系统配置使用skywalking+配置文件中的配置名来作为系统配置项来进行覆盖\n案例：\n-Dskywalking.agent.service_name&#x3D;app_name\n\n探针配置通过在探针路径后添加参数来覆盖\n-javaagent:&#x2F;path&#x2F;apache-skywalking-apm-bin&#x2F;agent&#x2F;skywalking-agent.jar&#x3D;[option1]&#x3D;[value1],[option2]&#x3D;[value2]\n\n案例\n-javaagent:&#x2F;path&#x2F;apache-skywalking-apm-bin&#x2F;agent&#x2F;skywalking-agent.jar&#x3D;agent.service_name&#x3D;app_name\n\n如果配置中包含分隔符，则需要用引号包裹\n-javaagent:&#x2F;path&#x2F;apache-skywalking-apm-bin&#x2F;agent&#x2F;skywalking-agent.jar&#x3D;agent.service_name&#x3D;app_name,agent.ignore_suffix&#x3D;‘.jpg,.jpeg’\n\n系统环境变量配置由于配置项的取值规则如下\n# The service name in UI\nagent.service_name&#x3D;$&#123;SW_AGENT_NAME:Your_ApplicationName&#125;\n\n则可以在系统环境变量中配置SW_AGENT_NAME的值来指定应用名\n覆盖优先级探针配置 &gt; 系统配置 &gt; 系统环境变量配置 &gt; 配置文件\n使用在IDEA中使用\nlinux下在tomcat中使用编辑apache-tomcat-8.5.42\\bin\\catalina.sh文件，在文件顶部添加\nCATALINA_OPTS&#x3D;&quot;CATALINA_OPTS -javaagent:&#x2F;path&#x2F;apache-skywalking-apm-bin&#x2F;agent&#x2F;skywalking-agent.jar&#x3D;agent.service_name&#x3D;app_name&quot;;\nexport CATALINA_OPTS\n\nspringboot项目使用java -javaagent:&#x2F;path&#x2F;apache-skywalking-apm-bin&#x2F;agent&#x2F;skywalking-agent.jar -Dskywalking.agent.service_name&#x3D;app_name -jar app.jar\n\n","slug":23539,"date":"2020-09-21T08:54:44.000Z","categories_index":"中间键","tags_index":"skywalking","author_index":"zengdw"},{"id":"4e388504f2bd8f8f69b1914f1e554b37","title":"js判断键盘大小写是否开启","content":"&lt;input onkeypress&#x3D;&quot;detectCapsLock()&quot; type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; &#x2F;&gt;\n&lt;span style&#x3D;&quot;display:none;&quot;&gt;大写锁定键被按下，请注意大小写&lt;&#x2F;span&gt;\n\nfunction detectCapsLock() &#123;\n    let e &#x3D; window.event;\n    let o &#x3D; e.target || e.srcElement;\n    let oTip &#x3D; o.nextElementSibling;\n    let keyCode &#x3D; e.keyCode || e.which; &#x2F;&#x2F; 按键的keyCode \n    &#x2F;&#x2F; 65～90为26个大写英文字母，97～122号为26个小写英文字母\n    if (keyCode &gt;&#x3D; 65 &amp;&amp; keyCode &lt;&#x3D; 90)  &#123;\n        oTip.style.display &#x3D; &#39;&#39;;\n    &#125; else &#123;\n        oTip.style.display &#x3D; &#39;none&#39;;\n    &#125;\n&#125;\n\n","slug":30463,"date":"2020-09-11T03:40:20.000Z","categories_index":"前端","tags_index":"js","author_index":"zengdw"},{"id":"5be8a50999b3320e3c7474e4cc4dc3f4","title":"css实现开关样式","content":"\nhtml代码：\n\n&lt;div class&#x3D;&quot;switch onswitch&quot;&gt;\n  &lt;em&gt;开启&lt;&#x2F;em&gt;\n  &lt;i&gt;&lt;&#x2F;i&gt;\n&lt;&#x2F;div&gt;\n\n\ncss代码\n\n.switch &#123;\n\tposition: relative;\n\tdisplay: inline-block;\n\theight: 22px;\n\tline-height: 22px;\n\tmin-width: 35px;\n\tpadding: 0 5px;\n\tmargin-top: 8px;\n\tborder: 1px solid #d2d2d2;\n\tborder-radius: 20px;\n\tcursor: pointer;\n\tbackground-color: #fff;\n\t-webkit-transition: .1s linear;\n\ttransition: .1s linear;\n&#125;\n\n.switch em &#123;\n\tposition: relative;\n\ttop: 0;\n\twidth: 25px;\n\tmargin-left: 21px;\n\tpadding: 0 !important;\n\ttext-align: center !important;\n\tcolor: #999 !important;\n\tfont-style: normal !important;\n\tfont-size: 12px;\n\tuser-select: none;\n&#125;\n\n.switch i &#123;\n\tposition: absolute;\n\tleft: 5px;\n\ttop: 3px;\n\twidth: 16px;\n\theight: 16px;\n\tborder-radius: 20px;\n\tbackground-color: #d2d2d2;\n\t-webkit-transition: .1s linear;\n\ttransition: .1s linear;\n&#125;\n\n.onswitch &#123;\n\tborder-color: #5FB878;\n\tbackground-color: #5FB878;\n&#125;\n\n.onswitch em &#123;\n\tmargin-left: 5px;\n\tmargin-right: 21px;\n\tcolor: #fff !important;\n&#125;\n\n.onswitch i &#123;\n\tleft: 100%;\n\tmargin-left: -21px;\n\tbackground-color: #fff;\n&#125;\n\n\njs代码\n\n$(&#39;.switch&#39;).on(&#39;click&#39;, function()&#123;\n  let isCk &#x3D; $(this).hasClass(&#39;onswitch&#39;);\n  if(isCk)&#123;\n\t  &#x2F;&#x2F;关\n\t  $(this).removeClass(&#39;onswitch&#39;);\n\t  $(this).find(&#39;em&#39;).html(&#39;关闭&#39;);\n  &#125; else &#123;\n\t  &#x2F;&#x2F;开\n\t  $(this).addClass(&#39;onswitch&#39;);\n\t  $(this).find(&#39;em&#39;).html(&#39;开启&#39;);\n  &#125;\n&#125;);","slug":9666,"date":"2020-08-10T08:31:55.000Z","categories_index":"前端","tags_index":"css,html","author_index":"zengdw"},{"id":"dcab8f178658e0b742b136ca08bf3190","title":"浏览器滚动条样式设置","content":"&#x2F;*谷歌、safari、qq浏览器、360浏览器滚动条样式*&#x2F;\n&#x2F;*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*&#x2F;\n::-webkit-scrollbar &#123;\n    width: 8px;\n    height: 110px;\n    background-color: #F5F5F5;\n&#125;\n\n&#x2F;*定义滚动条轨道 内阴影+圆角*&#x2F;\n::-webkit-scrollbar-track &#123;\n    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n    border-radius: 10px;\n    background-color: #F5F5F5;\n&#125;\n\n&#x2F;*定义滑块 内阴影+圆角*&#x2F;\n::-webkit-scrollbar-thumb &#123;\n    border-radius: 10px;\n    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, .3);\n    background-color: #009688;\n&#125;\n\n&#x2F;*滑块效果*&#x2F;\n::-webkit-scrollbar-thumb:hover &#123;\n    border-radius: 5px;\n    -webkit-box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);\n    background: rgba(0, 0, 0, 0.4);\n&#125;\n\n&#x2F;*IE滚动条颜色*&#x2F;\nhtml &#123;\n    scrollbar-face-color: #009688; &#x2F;*滚动条颜色*&#x2F;\n    scrollbar-highlight-color: #000;\n    scrollbar-3dlight-color: #000;\n    scrollbar-darkshadow-color: #000;\n    scrollbar-Shadow-color: #adadad; &#x2F;*滑块边色*&#x2F;\n    scrollbar-arrow-color: rgba(0, 0, 0, 0.4); &#x2F;*箭头颜色*&#x2F;\n    scrollbar-track-color: #eeeeee; &#x2F;*背景颜色*&#x2F;\n&#125;","slug":33527,"date":"2020-08-10T08:30:51.000Z","categories_index":"前端","tags_index":"css,html","author_index":"zengdw"},{"id":"9511977d0276e955d3f16e429781c475","title":"修改vim颜色主题","content":"1、查看Vim实例中当前的颜色主题打开一个Vim窗口，输入命令:color或:colorscheme后回车查看当前的颜色主题。\n\n可以看到当前的颜色主题默认为default\n\n2、Vim实例中设置颜色主题输入命令”colorscheme 主题名字”，即可设置当前vim实例的颜色主题\n\n3、查看提供的vim颜色主题vim的颜色主题文件放在Vim运行目录下的color目录下，所以我们首先需要知道vim的运行目录\n在vim中输入命令:echo $VIMRUNTIME 来查看Vim的运行目录\n\n得到vim的运行目录,从图中可以看到，vim的运行路径为**/usr/share/vim/vim80 **\n\n进入vim的运行目录，查看colors目录下以“.vim”为结尾的文件,\n\n4、修改vim配置文件，更改默认颜色主题打开/etc/vim/vimrc文件，在其中加入一行”colorscheme 颜色主题名字”，之后保存更改即可\n\n","slug":10157,"date":"2020-08-10T07:41:43.000Z","categories_index":"软件工具","tags_index":"vim","author_index":"zengdw"},{"id":"b31cf66fb17dbcb59133c6dfc9634970","title":"root用户无法远程ssh登陆","content":"编辑 /etc/ssh/sshd_config文件\n找到PermitRootLogin，注释掉这一行\n添加PermitRootLogin yes，保存，退出。\n重启sshd：systemctl restart sshd\n","slug":15063,"date":"2020-08-10T07:40:50.000Z","categories_index":"软件工具","tags_index":"ssh,linux","author_index":"zengdw"},{"id":"fadb27a02765f25af0bc203706bae438","title":"js日期格式转换","content":"Date.prototype.Format &#x3D; function(fmt) &#123;\n    let o &#x3D; &#123;\n        &quot;M+&quot;: this.getMonth() + 1, &#x2F;&#x2F;月份   \n        &quot;d+&quot;: this.getDate(), &#x2F;&#x2F;日   \n        &quot;H+&quot;: this.getHours(), &#x2F;&#x2F;小时   \n        &quot;m+&quot;: this.getMinutes(), &#x2F;&#x2F;分   \n        &quot;s+&quot;: this.getSeconds(), &#x2F;&#x2F;秒   \n        &quot;q+&quot;: Math.floor((this.getMonth() + 3) &#x2F; 3), &#x2F;&#x2F;季度   \n        &quot;S&quot;: this.getMilliseconds() &#x2F;&#x2F;毫秒   \n    &#125;;\n    if (&#x2F;(y+)&#x2F;.test(fmt)) fmt &#x3D; fmt.replace(RegExp.$1, (this.getFullYear() + &quot;&quot;).substr(4 - RegExp.$1.length));\n    for (var k in o)\n        if (new RegExp(&quot;(&quot; + k + &quot;)&quot;).test(fmt)) fmt &#x3D; fmt.replace(RegExp.$1, (RegExp.$1.length &#x3D;&#x3D; 1) ? (o[k]) : ((&quot;00&quot; +\n                                                                                                                   o[k]).substr((&quot;&quot; + o[k]).length)));\n    return fmt;\n&#125;","slug":36865,"date":"2020-08-10T07:38:26.000Z","categories_index":"前端","tags_index":"js","author_index":"zengdw"},{"id":"b2e958537f8462ae1a8bcbf2d47c5807","title":"springboot使用maven assembly插件打包","content":"1、pom.xml添加assembly插件&lt;!-- 指定启动类，将依赖打成外部jar包 --&gt;\n&lt;!-- 这个也可以使用springboot默认的打包插件，不过最终依赖都在一个jar包里 --&gt;\n&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;maven-jar-plugin&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.2.0&lt;&#x2F;version&gt;\n    &lt;configuration&gt;\n        &lt;archive&gt;\n            &lt;!-- 生成的jar中，不要包含pom.xml和pom.properties这两个文件 --&gt;\n            &lt;addMavenDescriptor&gt;false&lt;&#x2F;addMavenDescriptor&gt;\n            &lt;manifest&gt;\n                &lt;!-- 是否要把第三方jar加入到类构建路径 --&gt;\n                &lt;addClasspath&gt;true&lt;&#x2F;addClasspath&gt;\n                &lt;!-- 外部依赖jar包的最终位置 --&gt;\n                &lt;!-- 因为我们将第三方jar和本项目jar放在同一个目录下，这里就使用.&#x2F; --&gt;\n                &lt;classpathPrefix&gt;.&#x2F;&lt;&#x2F;classpathPrefix&gt;\n                &lt;!-- 项目启动类 --&gt;\n                &lt;mainClass&gt;com.zengdw.assembly.AssemblyApplication&lt;&#x2F;mainClass&gt;\n            &lt;&#x2F;manifest&gt;\n        &lt;&#x2F;archive&gt;\n    &lt;&#x2F;configuration&gt;\n&lt;&#x2F;plugin&gt;\n&lt;!-- assembly打包插件 --&gt;\n&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.3.0&lt;&#x2F;version&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;id&gt;make-assebly&lt;&#x2F;id&gt;\n            &lt;!-- 绑定到maven操作类型上 --&gt;\n            &lt;phase&gt;package&lt;&#x2F;phase&gt;\n            &lt;!-- 运行一次 --&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;single&lt;&#x2F;goal&gt;\n            &lt;&#x2F;goals&gt;\n            &lt;configuration&gt;\n                &lt;!-- 指定最后tar或者zip包的名字 --&gt;\n                &lt;finalName&gt;$&#123;project.name&#125;-$&#123;project.version&#125;&lt;&#x2F;finalName&gt;\n                &lt;!-- tar或者zip包的输出目录 --&gt;\n                &lt;!-- .&#x2F; 是指当前项目的根目录 --&gt;\n                &lt;outputDirectory&gt;.&#x2F;target&lt;&#x2F;outputDirectory&gt;\n                &lt;!-- 打包后的包名是否包含assembly的id名 --&gt;\n                &lt;appendAssemblyId&gt;false&lt;&#x2F;appendAssemblyId&gt;\n                &lt;descriptors&gt;\n                    &lt;!-- 具体的配置文件位置 --&gt;\n                    &lt;descriptor&gt;src&#x2F;main&#x2F;assembly&#x2F;assembly.xml&lt;&#x2F;descriptor&gt;\n                &lt;&#x2F;descriptors&gt;\n            &lt;&#x2F;configuration&gt;\n        &lt;&#x2F;execution&gt;\n    &lt;&#x2F;executions&gt;\n&lt;&#x2F;plugin&gt;\n\n2、assembly.xml配置文件&lt;assembly&gt;\n    &lt;!--\n        必须写，否则打包时会有 assembly ID must be present and non-empty 错误\n        如果pom.xml assembly插件配置的appendAssemblyId&#x3D;true这个名字最终会追加到打包的名字的末尾，\n\t\t如项目的名字为 hangge-test-0.0.1-SNAPSHOT,\n        则最终生成的包名为 hangge-test-0.0.1-SNAPSHOT-bin.zip\n     --&gt;\n    &lt;id&gt;bin&lt;&#x2F;id&gt;\n    &lt;!-- 打包的类型，如果有N个，将会打N个类型的包 --&gt;\n    &lt;formats&gt;\n        &lt;!--&lt;format&gt;tar.gz&lt;&#x2F;format&gt;--&gt;\n        &lt;format&gt;zip&lt;&#x2F;format&gt;\n    &lt;&#x2F;formats&gt;\n    &lt;!-- 禁止在归档文件中创建根目录的分发目录 --&gt;\n    &lt;includeBaseDirectory&gt;false&lt;&#x2F;includeBaseDirectory&gt;\n\n    &lt;!--第三方依赖设置--&gt;\n    &lt;!-- 如果使用的是springboot默认的打包插件就不要配置这个了 --&gt;\n    &lt;dependencySets&gt;\n        &lt;dependencySet&gt;\n            &lt;!-- 不使用项目的artifact，第三方jar不要解压，打包进zip文件的lib目录 --&gt;\n            &lt;useProjectArtifact&gt;false&lt;&#x2F;useProjectArtifact&gt;\n            &lt;outputDirectory&gt;lib&lt;&#x2F;outputDirectory&gt;\n            &lt;unpack&gt;false&lt;&#x2F;unpack&gt;\n        &lt;&#x2F;dependencySet&gt;\n    &lt;&#x2F;dependencySets&gt;\n\n    &lt;!--文件设置--&gt;\n    &lt;fileSets&gt;\n        &lt;!--\n            0755-&gt;即用户具有读&#x2F;写&#x2F;执行权限，组用户和其它用户具有读写权限；\n            0644-&gt;即用户具有读写权限，组用户和其它用户具有只读权限；\n        --&gt;\n        &lt;!-- 将src&#x2F;main&#x2F;assembly&#x2F;bin目录下的所有文件输出到打包后的bin目录中 --&gt;\n        &lt;fileSet&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;assembly&#x2F;bin&lt;&#x2F;directory&gt;\n            &lt;outputDirectory&gt;bin&lt;&#x2F;outputDirectory&gt;\n            &lt;fileMode&gt;0755&lt;&#x2F;fileMode&gt;\n            &lt;!--如果是脚本，一定要改为unix.如果是在windows上面编码，会出现dos编写问题--&gt;\n            &lt;lineEnding&gt;unix&lt;&#x2F;lineEnding&gt;\n            &lt;!-- 是否进行属性替换 --&gt;\n            &lt;filtered&gt;true&lt;&#x2F;filtered&gt;\n        &lt;&#x2F;fileSet&gt;\n        &lt;!-- 将src&#x2F;main&#x2F;assembly&#x2F;config目录下的所有文件输出到打包后的config目录中 --&gt;\n        &lt;fileSet&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;assembly&#x2F;config&lt;&#x2F;directory&gt;\n            &lt;outputDirectory&gt;config&lt;&#x2F;outputDirectory&gt;\n            &lt;fileMode&gt;0644&lt;&#x2F;fileMode&gt;\n        &lt;&#x2F;fileSet&gt;\n        &lt;!-- 将src&#x2F;main&#x2F;resources下配置文件打包到config目录 --&gt;\n        &lt;fileSet&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n            &lt;outputDirectory&gt;config&lt;&#x2F;outputDirectory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;\n                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;\n                &lt;include&gt;**&#x2F;*.yml&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;!-- 是否进行属性替换 --&gt;\n            &lt;filtered&gt;true&lt;&#x2F;filtered&gt;\n        &lt;&#x2F;fileSet&gt;\n        &lt;!-- 将项目启动jar打包到lib目录中 --&gt;\n        &lt;fileSet&gt;\n            &lt;directory&gt;target&lt;&#x2F;directory&gt;\n            &lt;outputDirectory&gt;lib&lt;&#x2F;outputDirectory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;*.jar&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n        &lt;&#x2F;fileSet&gt;\n        &lt;!-- 将项目说明文档打包到docs目录中 --&gt;\n        &lt;fileSet&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;docs&lt;&#x2F;directory&gt;\n            &lt;outputDirectory&gt;docs&lt;&#x2F;outputDirectory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;*.md&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;fileMode&gt;0644&lt;&#x2F;fileMode&gt;\n        &lt;&#x2F;fileSet&gt;\n    &lt;&#x2F;fileSets&gt;\n&lt;&#x2F;assembly&gt;\n\n3、启动文件3.1 start.batecho off\n\nset APP_NAME&#x3D;$&#123;project.build.finalName&#125;.jar\nset LOG_IMPL_FILE&#x3D;logback-spring.xml\nset LOGGING_CONFIG&#x3D;\nif exist ..&#x2F;config&#x2F;%LOG_IMPL_FILE% (\n    set LOGGING_CONFIG&#x3D;-Dlogging.config&#x3D;..&#x2F;config&#x2F;%LOG_IMPL_FILE%\n)\nset CONFIG&#x3D; -Dlogging.path&#x3D;..&#x2F;logs %LOGGING_CONFIG% -Dspring.config.location&#x3D;..&#x2F;config&#x2F;\n\necho &quot;Starting the %APP_NAME%&quot;\njava -Xms512m -Xmx512m %CONFIG% -jar ..&#x2F;lib&#x2F;%APP_NAME%\necho &quot;java -Xms512m -Xmx512m %CONFIG% -jar ..&#x2F;lib&#x2F;%APP_NAME%&quot;\ngoto end\n\n:end\npause\n\n3.2 start.sh#!&#x2F;bin&#x2F;bash\n\n# 项目名称\nSERVER_NAME&#x3D;&quot;$&#123;project.artifactId&#125;&quot;\n\n# jar名称\nJAR_NAME&#x3D;&quot;$&#123;project.build.finalName&#125;.jar&quot;\n\n# 进入bin目录\ncd &#96;dirname $0&#96;\n# bin目录绝对路径\nBIN_DIR&#x3D;&#96;pwd&#96;\n# 返回到上一级项目根目录路径\ncd ..\n# 打印项目根目录绝对路径\n# &#96;pwd&#96; 执行系统命令并获得结果\nDEPLOY_DIR&#x3D;&#96;pwd&#96;\n\n# 外部配置文件绝对目录,如果是目录需要&#x2F;结尾，也可以直接指定文件\n# 如果指定的是目录,spring则会读取目录中的所有配置文件\nCONF_DIR&#x3D;$DEPLOY_DIR&#x2F;config\n\nPIDS&#x3D;&#96;ps -f | grep &quot;$JAR_NAME&quot; | grep -v grep |awk &#39;&#123;print $2&#125;&#39;&#96;\nif [ &quot;$1&quot; &#x3D; &quot;status&quot; ]; then\n    if [ -n &quot;$PIDS&quot; ]; then\n        echo &quot;The $SERVER_NAME is running...!&quot;\n        echo &quot;PID: $PIDS&quot;\n        exit 0\n    else\n        echo &quot;The $SERVER_NAME is stopped&quot;\n        exit 0\n    fi\nfi\n\nif [ -n &quot;$PIDS&quot; ]; then\n    echo &quot;ERROR: The $SERVER_NAME already started!&quot;\n    echo &quot;PID: $PIDS&quot;\n    exit 1\nfi\n\n# 项目日志输出绝对路径\nLOGS_DIR&#x3D;$DEPLOY_DIR&#x2F;logs\n# 如果logs文件夹不存在,则创建文件夹\nif [ ! -d $LOGS_DIR ]; then\n    mkdir $LOGS_DIR\nfi\nSTDOUT_FILE&#x3D;$LOGS_DIR&#x2F;catalina.log\n\n# 加载外部log4j2文件的配置\nLOG_IMPL_FILE&#x3D;logback-spring.xml\nLOGGING_CONFIG&#x3D;&quot;&quot;\nif [ -f &quot;$CONF_DIR&#x2F;$LOG_IMPL_FILE&quot; ]\nthen\n    LOGGING_CONFIG&#x3D;&quot;-Dlogging.config&#x3D;$CONF_DIR&#x2F;$LOG_IMPL_FILE&quot;\nfi\nCONFIG_FILES&#x3D;&quot; -Dlogging.path&#x3D;$LOGS_DIR $LOGGING_CONFIG -Dspring.config.location&#x3D;$CONF_DIR&#x2F; &quot;\necho -e &quot;Starting the $SERVER_NAME ...&quot;\nnohup java $CONFIG_FILES -jar $DEPLOY_DIR&#x2F;lib&#x2F;$JAR_NAME &gt; $STDOUT_FILE 2&gt;&amp;1 &amp;\n\nCOUNT&#x3D;0\nwhile [ $COUNT -lt 1 ]; do\n    echo -e &quot;.\\c&quot;\n    sleep 1\n    COUNT&#x3D;&#96;ps -f | grep java | grep &quot;$DEPLOY_DIR&quot; | awk &#39;&#123;print $2&#125;&#39; | wc -l&#96;\n    if [ $COUNT -gt 0 ]; then\n        break\n    fi\ndone\n\n\necho -e &quot;\\nOK!&quot;\nPIDS&#x3D;&#96;ps -f | grep java | grep &quot;$DEPLOY_DIR&quot; | awk &#39;&#123;print $2&#125;&#39;&#96;\necho &quot;PID: $PIDS&quot;\necho &quot;STDOUT: $STDOUT_FILE&quot;\n\n3.3 stop.sh#!&#x2F;bin&#x2F;bash\n\n# 项目名称\nAPPLICATION&#x3D;&quot;$&#123;project.artifactId&#125;&quot;\n\n# 项目启动jar包名称\nAPPLICATION_JAR&#x3D;&quot;$&#123;project.build.finalName&#125;.jar&quot;\n\n# 通过项目名称查找到PI，然后kill -9 pid\nPID&#x3D;$(ps -ef | grep &quot;$&#123;APPLICATION_JAR&#125;&quot; | grep -v grep | awk &#39;&#123; print $2 &#125;&#39;)\nif [[ -z &quot;$PID&quot; ]]\nthen\n    echo $&#123;APPLICATION&#125; is already stopped\nelse\n    echo kill  $&#123;PID&#125;\n    kill -15 $&#123;PID&#125;\n    echo $&#123;APPLICATION&#125; stopped successfully\nfi\n\n","slug":50842,"date":"2020-08-10T07:28:01.000Z","categories_index":"java","tags_index":"maven,assembly,springboot","author_index":"zengdw"}]