{"title":"springboot使用maven assembly插件打包","uid":"b2e958537f8462ae1a8bcbf2d47c5807","slug":50842,"date":"2020-08-10T07:28:01.000Z","updated":"2024-11-07T06:45:23.583Z","comments":true,"path":"api/articles/50842.json","keywords":"zengdw, java, html, js, css, spring, mysql","cover":null,"content":"<h3 id=\"1、pom-xml添加assembly插件\"><a href=\"#1、pom-xml添加assembly插件\" class=\"headerlink\" title=\"1、pom.xml添加assembly插件\"></a>1、pom.xml添加assembly插件</h3><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 指定启动类，将依赖打成外部jar包 --&gt;\n&lt;!-- 这个也可以使用springboot默认的打包插件，不过最终依赖都在一个jar包里 --&gt;\n&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;maven-jar-plugin&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.2.0&lt;&#x2F;version&gt;\n    &lt;configuration&gt;\n        &lt;archive&gt;\n            &lt;!-- 生成的jar中，不要包含pom.xml和pom.properties这两个文件 --&gt;\n            &lt;addMavenDescriptor&gt;false&lt;&#x2F;addMavenDescriptor&gt;\n            &lt;manifest&gt;\n                &lt;!-- 是否要把第三方jar加入到类构建路径 --&gt;\n                &lt;addClasspath&gt;true&lt;&#x2F;addClasspath&gt;\n                &lt;!-- 外部依赖jar包的最终位置 --&gt;\n                &lt;!-- 因为我们将第三方jar和本项目jar放在同一个目录下，这里就使用.&#x2F; --&gt;\n                &lt;classpathPrefix&gt;.&#x2F;&lt;&#x2F;classpathPrefix&gt;\n                &lt;!-- 项目启动类 --&gt;\n                &lt;mainClass&gt;com.zengdw.assembly.AssemblyApplication&lt;&#x2F;mainClass&gt;\n            &lt;&#x2F;manifest&gt;\n        &lt;&#x2F;archive&gt;\n    &lt;&#x2F;configuration&gt;\n&lt;&#x2F;plugin&gt;\n&lt;!-- assembly打包插件 --&gt;\n&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.3.0&lt;&#x2F;version&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;id&gt;make-assebly&lt;&#x2F;id&gt;\n            &lt;!-- 绑定到maven操作类型上 --&gt;\n            &lt;phase&gt;package&lt;&#x2F;phase&gt;\n            &lt;!-- 运行一次 --&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;single&lt;&#x2F;goal&gt;\n            &lt;&#x2F;goals&gt;\n            &lt;configuration&gt;\n                &lt;!-- 指定最后tar或者zip包的名字 --&gt;\n                &lt;finalName&gt;$&#123;project.name&#125;-$&#123;project.version&#125;&lt;&#x2F;finalName&gt;\n                &lt;!-- tar或者zip包的输出目录 --&gt;\n                &lt;!-- .&#x2F; 是指当前项目的根目录 --&gt;\n                &lt;outputDirectory&gt;.&#x2F;target&lt;&#x2F;outputDirectory&gt;\n                &lt;!-- 打包后的包名是否包含assembly的id名 --&gt;\n                &lt;appendAssemblyId&gt;false&lt;&#x2F;appendAssemblyId&gt;\n                &lt;descriptors&gt;\n                    &lt;!-- 具体的配置文件位置 --&gt;\n                    &lt;descriptor&gt;src&#x2F;main&#x2F;assembly&#x2F;assembly.xml&lt;&#x2F;descriptor&gt;\n                &lt;&#x2F;descriptors&gt;\n            &lt;&#x2F;configuration&gt;\n        &lt;&#x2F;execution&gt;\n    &lt;&#x2F;executions&gt;\n&lt;&#x2F;plugin&gt;</code></pre>\n\n<h3 id=\"2、assembly-xml配置文件\"><a href=\"#2、assembly-xml配置文件\" class=\"headerlink\" title=\"2、assembly.xml配置文件\"></a>2、assembly.xml配置文件</h3><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;assembly&gt;\n    &lt;!--\n        必须写，否则打包时会有 assembly ID must be present and non-empty 错误\n        如果pom.xml assembly插件配置的appendAssemblyId&#x3D;true这个名字最终会追加到打包的名字的末尾，\n\t\t如项目的名字为 hangge-test-0.0.1-SNAPSHOT,\n        则最终生成的包名为 hangge-test-0.0.1-SNAPSHOT-bin.zip\n     --&gt;\n    &lt;id&gt;bin&lt;&#x2F;id&gt;\n    &lt;!-- 打包的类型，如果有N个，将会打N个类型的包 --&gt;\n    &lt;formats&gt;\n        &lt;!--&lt;format&gt;tar.gz&lt;&#x2F;format&gt;--&gt;\n        &lt;format&gt;zip&lt;&#x2F;format&gt;\n    &lt;&#x2F;formats&gt;\n    &lt;!-- 禁止在归档文件中创建根目录的分发目录 --&gt;\n    &lt;includeBaseDirectory&gt;false&lt;&#x2F;includeBaseDirectory&gt;\n\n    &lt;!--第三方依赖设置--&gt;\n    &lt;!-- 如果使用的是springboot默认的打包插件就不要配置这个了 --&gt;\n    &lt;dependencySets&gt;\n        &lt;dependencySet&gt;\n            &lt;!-- 不使用项目的artifact，第三方jar不要解压，打包进zip文件的lib目录 --&gt;\n            &lt;useProjectArtifact&gt;false&lt;&#x2F;useProjectArtifact&gt;\n            &lt;outputDirectory&gt;lib&lt;&#x2F;outputDirectory&gt;\n            &lt;unpack&gt;false&lt;&#x2F;unpack&gt;\n        &lt;&#x2F;dependencySet&gt;\n    &lt;&#x2F;dependencySets&gt;\n\n    &lt;!--文件设置--&gt;\n    &lt;fileSets&gt;\n        &lt;!--\n            0755-&gt;即用户具有读&#x2F;写&#x2F;执行权限，组用户和其它用户具有读写权限；\n            0644-&gt;即用户具有读写权限，组用户和其它用户具有只读权限；\n        --&gt;\n        &lt;!-- 将src&#x2F;main&#x2F;assembly&#x2F;bin目录下的所有文件输出到打包后的bin目录中 --&gt;\n        &lt;fileSet&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;assembly&#x2F;bin&lt;&#x2F;directory&gt;\n            &lt;outputDirectory&gt;bin&lt;&#x2F;outputDirectory&gt;\n            &lt;fileMode&gt;0755&lt;&#x2F;fileMode&gt;\n            &lt;!--如果是脚本，一定要改为unix.如果是在windows上面编码，会出现dos编写问题--&gt;\n            &lt;lineEnding&gt;unix&lt;&#x2F;lineEnding&gt;\n            &lt;!-- 是否进行属性替换 --&gt;\n            &lt;filtered&gt;true&lt;&#x2F;filtered&gt;\n        &lt;&#x2F;fileSet&gt;\n        &lt;!-- 将src&#x2F;main&#x2F;assembly&#x2F;config目录下的所有文件输出到打包后的config目录中 --&gt;\n        &lt;fileSet&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;assembly&#x2F;config&lt;&#x2F;directory&gt;\n            &lt;outputDirectory&gt;config&lt;&#x2F;outputDirectory&gt;\n            &lt;fileMode&gt;0644&lt;&#x2F;fileMode&gt;\n        &lt;&#x2F;fileSet&gt;\n        &lt;!-- 将src&#x2F;main&#x2F;resources下配置文件打包到config目录 --&gt;\n        &lt;fileSet&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n            &lt;outputDirectory&gt;config&lt;&#x2F;outputDirectory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;\n                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;\n                &lt;include&gt;**&#x2F;*.yml&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;!-- 是否进行属性替换 --&gt;\n            &lt;filtered&gt;true&lt;&#x2F;filtered&gt;\n        &lt;&#x2F;fileSet&gt;\n        &lt;!-- 将项目启动jar打包到lib目录中 --&gt;\n        &lt;fileSet&gt;\n            &lt;directory&gt;target&lt;&#x2F;directory&gt;\n            &lt;outputDirectory&gt;lib&lt;&#x2F;outputDirectory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;*.jar&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n        &lt;&#x2F;fileSet&gt;\n        &lt;!-- 将项目说明文档打包到docs目录中 --&gt;\n        &lt;fileSet&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;docs&lt;&#x2F;directory&gt;\n            &lt;outputDirectory&gt;docs&lt;&#x2F;outputDirectory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;*.md&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;fileMode&gt;0644&lt;&#x2F;fileMode&gt;\n        &lt;&#x2F;fileSet&gt;\n    &lt;&#x2F;fileSets&gt;\n&lt;&#x2F;assembly&gt;</code></pre>\n\n<h3 id=\"3、启动文件\"><a href=\"#3、启动文件\" class=\"headerlink\" title=\"3、启动文件\"></a>3、启动文件</h3><h4 id=\"3-1-start-bat\"><a href=\"#3-1-start-bat\" class=\"headerlink\" title=\"3.1 start.bat\"></a>3.1 start.bat</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">echo off\n\nset APP_NAME&#x3D;$&#123;project.build.finalName&#125;.jar\nset LOG_IMPL_FILE&#x3D;logback-spring.xml\nset LOGGING_CONFIG&#x3D;\nif exist ..&#x2F;config&#x2F;%LOG_IMPL_FILE% (\n    set LOGGING_CONFIG&#x3D;-Dlogging.config&#x3D;..&#x2F;config&#x2F;%LOG_IMPL_FILE%\n)\nset CONFIG&#x3D; -Dlogging.path&#x3D;..&#x2F;logs %LOGGING_CONFIG% -Dspring.config.location&#x3D;..&#x2F;config&#x2F;\n\necho &quot;Starting the %APP_NAME%&quot;\njava -Xms512m -Xmx512m %CONFIG% -jar ..&#x2F;lib&#x2F;%APP_NAME%\necho &quot;java -Xms512m -Xmx512m %CONFIG% -jar ..&#x2F;lib&#x2F;%APP_NAME%&quot;\ngoto end\n\n:end\npause</code></pre>\n\n<h4 id=\"3-2-start-sh\"><a href=\"#3-2-start-sh\" class=\"headerlink\" title=\"3.2 start.sh\"></a>3.2 start.sh</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;bash\n\n# 项目名称\nSERVER_NAME&#x3D;&quot;$&#123;project.artifactId&#125;&quot;\n\n# jar名称\nJAR_NAME&#x3D;&quot;$&#123;project.build.finalName&#125;.jar&quot;\n\n# 进入bin目录\ncd &#96;dirname $0&#96;\n# bin目录绝对路径\nBIN_DIR&#x3D;&#96;pwd&#96;\n# 返回到上一级项目根目录路径\ncd ..\n# 打印项目根目录绝对路径\n# &#96;pwd&#96; 执行系统命令并获得结果\nDEPLOY_DIR&#x3D;&#96;pwd&#96;\n\n# 外部配置文件绝对目录,如果是目录需要&#x2F;结尾，也可以直接指定文件\n# 如果指定的是目录,spring则会读取目录中的所有配置文件\nCONF_DIR&#x3D;$DEPLOY_DIR&#x2F;config\n\nPIDS&#x3D;&#96;ps -f | grep &quot;$JAR_NAME&quot; | grep -v grep |awk &#39;&#123;print $2&#125;&#39;&#96;\nif [ &quot;$1&quot; &#x3D; &quot;status&quot; ]; then\n    if [ -n &quot;$PIDS&quot; ]; then\n        echo &quot;The $SERVER_NAME is running...!&quot;\n        echo &quot;PID: $PIDS&quot;\n        exit 0\n    else\n        echo &quot;The $SERVER_NAME is stopped&quot;\n        exit 0\n    fi\nfi\n\nif [ -n &quot;$PIDS&quot; ]; then\n    echo &quot;ERROR: The $SERVER_NAME already started!&quot;\n    echo &quot;PID: $PIDS&quot;\n    exit 1\nfi\n\n# 项目日志输出绝对路径\nLOGS_DIR&#x3D;$DEPLOY_DIR&#x2F;logs\n# 如果logs文件夹不存在,则创建文件夹\nif [ ! -d $LOGS_DIR ]; then\n    mkdir $LOGS_DIR\nfi\nSTDOUT_FILE&#x3D;$LOGS_DIR&#x2F;catalina.log\n\n# 加载外部log4j2文件的配置\nLOG_IMPL_FILE&#x3D;logback-spring.xml\nLOGGING_CONFIG&#x3D;&quot;&quot;\nif [ -f &quot;$CONF_DIR&#x2F;$LOG_IMPL_FILE&quot; ]\nthen\n    LOGGING_CONFIG&#x3D;&quot;-Dlogging.config&#x3D;$CONF_DIR&#x2F;$LOG_IMPL_FILE&quot;\nfi\nCONFIG_FILES&#x3D;&quot; -Dlogging.path&#x3D;$LOGS_DIR $LOGGING_CONFIG -Dspring.config.location&#x3D;$CONF_DIR&#x2F; &quot;\necho -e &quot;Starting the $SERVER_NAME ...&quot;\nnohup java $CONFIG_FILES -jar $DEPLOY_DIR&#x2F;lib&#x2F;$JAR_NAME &gt; $STDOUT_FILE 2&gt;&amp;1 &amp;\n\nCOUNT&#x3D;0\nwhile [ $COUNT -lt 1 ]; do\n    echo -e &quot;.\\c&quot;\n    sleep 1\n    COUNT&#x3D;&#96;ps -f | grep java | grep &quot;$DEPLOY_DIR&quot; | awk &#39;&#123;print $2&#125;&#39; | wc -l&#96;\n    if [ $COUNT -gt 0 ]; then\n        break\n    fi\ndone\n\n\necho -e &quot;\\nOK!&quot;\nPIDS&#x3D;&#96;ps -f | grep java | grep &quot;$DEPLOY_DIR&quot; | awk &#39;&#123;print $2&#125;&#39;&#96;\necho &quot;PID: $PIDS&quot;\necho &quot;STDOUT: $STDOUT_FILE&quot;</code></pre>\n\n<h4 id=\"3-3-stop-sh\"><a href=\"#3-3-stop-sh\" class=\"headerlink\" title=\"3.3 stop.sh\"></a>3.3 stop.sh</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;bash\n\n# 项目名称\nAPPLICATION&#x3D;&quot;$&#123;project.artifactId&#125;&quot;\n\n# 项目启动jar包名称\nAPPLICATION_JAR&#x3D;&quot;$&#123;project.build.finalName&#125;.jar&quot;\n\n# 通过项目名称查找到PI，然后kill -9 pid\nPID&#x3D;$(ps -ef | grep &quot;$&#123;APPLICATION_JAR&#125;&quot; | grep -v grep | awk &#39;&#123; print $2 &#125;&#39;)\nif [[ -z &quot;$PID&quot; ]]\nthen\n    echo $&#123;APPLICATION&#125; is already stopped\nelse\n    echo kill  $&#123;PID&#125;\n    kill -15 $&#123;PID&#125;\n    echo $&#123;APPLICATION&#125; stopped successfully\nfi</code></pre>\n\n","text":"1、pom.xml添加assembly插件&lt;!-- 指定启动类，将依赖打成外部jar包 --&gt; &lt;!-- 这个也可以使用springboot默认的打包插件，不过最终依赖都在一个jar包里 --&gt; &lt;plugin&gt; &lt;groupId&gt;...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"java","slug":"java","count":4,"path":"api/categories/java.json"}],"tags":[{"name":"maven","slug":"maven","count":1,"path":"api/tags/maven.json"},{"name":"assembly","slug":"assembly","count":1,"path":"api/tags/assembly.json"},{"name":"springboot","slug":"springboot","count":1,"path":"api/tags/springboot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81pom-xml%E6%B7%BB%E5%8A%A0assembly%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">1、pom.xml添加assembly插件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81assembly-xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2、assembly.xml配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3、启动文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-start-bat\"><span class=\"toc-text\">3.1 start.bat</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-start-sh\"><span class=\"toc-text\">3.2 start.sh</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-stop-sh\"><span class=\"toc-text\">3.3 stop.sh</span></a></li></ol></li></ol>","author":{"name":"zengdw","slug":"blog-author","avatar":"/img/z.png","link":"/","description":"个人学习记录","socials":{"github":"https://github.com/zengdw","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/zengdw"},"email":{"icon":"/img/svg/email-fill.svg","link":"mailto:309606298@qq.com"}}}},"mapped":true,"prev_post":{"title":"js日期格式转换","uid":"fadb27a02765f25af0bc203706bae438","slug":36865,"date":"2020-08-10T07:38:26.000Z","updated":"2024-11-07T06:45:23.579Z","comments":true,"path":"api/articles/36865.json","keywords":"zengdw, java, html, js, css, spring, mysql","cover":null,"text":"Date.prototype.Format &#x3D; function(fmt) &#123; let o &#x3D; &#123; &quot;M+&quot;: this.getMonth() + 1, &#x2F;&#x2F;月份 &quot;d+&quot;: th...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":6,"path":"api/categories/前端.json"}],"tags":[{"name":"js","slug":"js","count":4,"path":"api/tags/js.json"}],"author":{"name":"zengdw","slug":"blog-author","avatar":"/img/z.png","link":"/","description":"个人学习记录","socials":{"github":"https://github.com/zengdw","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/zengdw"},"email":{"icon":"/img/svg/email-fill.svg","link":"mailto:309606298@qq.com"}}}}},"next_post":{}}