{"title":"JavaScript常用函数封装方法","uid":"6fbfd3f92e094317427a7de3addb6e33","slug":19543,"date":"2021-09-16T03:24:59.000Z","updated":"2024-11-07T06:45:23.575Z","comments":true,"path":"api/articles/19543.json","keywords":"zengdw, java, html, js, css, spring, mysql","cover":null,"content":"<h1 id=\"JavaScript常用函数封装方法\"><a href=\"#JavaScript常用函数封装方法\" class=\"headerlink\" title=\"JavaScript常用函数封装方法\"></a>JavaScript常用函数封装方法</h1><h2 id=\"1、加载js-css-style\"><a href=\"#1、加载js-css-style\" class=\"headerlink\" title=\"1、加载js || css || style\"></a>1、加载js || css || style</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">const loadRes &#x3D; function(name, type, fn) &#123; &#x2F;&#x2F; 加载js || css || style\n  let ref\n  if (type &#x3D;&#x3D;&#x3D; &#39;js&#39;) &#123; &#x2F;&#x2F; 外部js\n    ref &#x3D; document.createElement(&#39;script&#39;)\n    ref.setAttribute(&#39;type&#39;, &#39;text&#x2F;JavaScript&#39;)\n    ref.setAttribute(&#39;src&#39;, name)\n  &#125; else if (type &#x3D;&#x3D;&#x3D; &#39;css&#39;) &#123; &#x2F;&#x2F; 外部css\n    ref &#x3D; document.createElement(&#39;link&#39;)\n    ref.setAttribute(&#39;rel&#39;, &#39;stylesheet&#39;)\n    ref.setAttribute(&#39;type&#39;, &#39;text&#x2F;css&#39;)\n    ref.setAttribute(&#39;href&#39;, name)\n  &#125; else if (type &#x3D;&#x3D;&#x3D; &#39;style&#39;) &#123; &#x2F;&#x2F; style\n    ref &#x3D; document.createElement(&#39;style&#39;)\n    ref.innerhtml &#x3D; name\n  &#125;\n  if (typeof ref !&#x3D;&#x3D; &#39;undefined&#39;) &#123;\n    document.getElementsByTagName(&#39;head&#39;)[0].appendChild(ref)\n    ref.onload &#x3D; function() &#123; &#x2F;&#x2F; 加载完成执行\n      typeof fn &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; fn()\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"2、取url参数\"><a href=\"#2、取url参数\" class=\"headerlink\" title=\"2、取url参数\"></a>2、取url参数</h2><ol>\n<li><p>正则方式获取</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">const getUrlParam &#x3D; function(name) &#123; \n  let reg &#x3D; new RegExp(&#39;(^|&amp;?)&#39; + name + &#39;&#x3D;([^&amp;]*)(&amp;|$)&#39;, &#39;i&#39;)\n  let r &#x3D; window.location.href.substr(1).match(reg)\n  if (r !&#x3D; null) &#123;\n    return decodeURI(r[2])\n  &#125;\n  return undefined\n&#125;</code></pre></li>\n<li><p>URLSearchParams()函数</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">function getUrlParam(name) &#123;\n  let params &#x3D; new URLSearchParams(window.location.search)\n  return params.get(name)\n&#125;</code></pre></li>\n<li><p>split拆分</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">function getUrlParam(name) &#123;\n  let params &#x3D; window.location.search\n  let vars &#x3D; params.substr(1).split(&quot;&amp;&quot;)\n  for (var i &#x3D; 0; i &lt; vars.length; i++) &#123;\n    let pair &#x3D; vars[i].split(&quot;&#x3D;&quot;)\n    if (pair[0] &#x3D;&#x3D; name) &#123; return pair[1] &#125;\n  &#125;\n  return &#39;&#39;\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"3、cookie操作【set，get，del】\"><a href=\"#3、cookie操作【set，get，del】\" class=\"headerlink\" title=\"3、cookie操作【set，get，del】\"></a>3、cookie操作【set，get，del】</h2>   <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">const cookie &#x3D; &#123; \n  set: function(name, value, day) &#123;\n    let oDate &#x3D; new Date()\n    oDate.setDate(oDate.getDate() + (day || 30))\n    document.cookie &#x3D; name + &#39;&#x3D;&#39; + value + &#39;;expires&#x3D;&#39; + oDate + &quot;; path&#x3D;&#x2F;;&quot;\n  &#125;,\n  get: function(name) &#123;\n    let str &#x3D; document.cookie\n    let arr &#x3D; str.split(&#39;; &#39;)\n    for (let i &#x3D; 0; i &lt; arr.length; i++) &#123;\n      let newArr &#x3D; arr[i].split(&#39;&#x3D;&#39;)\n      if (newArr[0] &#x3D;&#x3D;&#x3D; name) &#123;\n        return newArr[1]\n      &#125;\n    &#125;\n  &#125;,\n  del: function(name) &#123;\n    this.set(name, &#39;&#39;, -1)\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"4、时间格式化\"><a href=\"#4、时间格式化\" class=\"headerlink\" title=\"4、时间格式化\"></a>4、时间格式化</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">const formatDate &#x3D; function(fmt, date) &#123; \n  if (typeof date !&#x3D;&#x3D; &#39;object&#39;) &#123;\n    date &#x3D; !date ? new Date() : new Date(date)\n  &#125;\n  var o &#x3D; &#123;\n    &#39;M+&#39;: date.getMonth() + 1, &#x2F;&#x2F; 月份\n    &#39;d+&#39;: date.getDate(), &#x2F;&#x2F; 日\n    &#39;h+&#39;: date.getHours(), &#x2F;&#x2F; 小时\n    &#39;m+&#39;: date.getMinutes(), &#x2F;&#x2F; 分\n    &#39;s+&#39;: date.getSeconds(), &#x2F;&#x2F; 秒\n    &#39;q+&#39;: Math.floor((date.getMonth() + 3) &#x2F; 3), &#x2F;&#x2F; 季度\n    &#39;S&#39;: date.getMilliseconds() &#x2F;&#x2F; 毫秒\n  &#125;\n  if (&#x2F;(y+)&#x2F;.test(fmt)) &#123;\n    fmt &#x3D; fmt.replace(RegExp.$1, (date.getFullYear() + &#39;&#39;).substr(4 - RegExp.$1.length))\n  &#125;\n  for (var k in o) &#123;\n    if (new RegExp(&#39;(&#39; + k + &#39;)&#39;).test(fmt)) &#123;\n      fmt &#x3D; fmt.replace(RegExp.$1, (RegExp.$1.length &#x3D;&#x3D;&#x3D; 1) ? (o[k]) : ((&#39;00&#39; + o[k]).substr((&#39;&#39; + o[k]).length)))\n    &#125;\n  &#125;\n  return fmt\n&#125;</code></pre>\n\n<h2 id=\"5、base64图片下载功能\"><a href=\"#5、base64图片下载功能\" class=\"headerlink\" title=\"5、base64图片下载功能\"></a>5、base64图片下载功能</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">\nconst downloadFile &#x3D; function(base64, fileName) &#123; &#x2F;&#x2F;base64图片下载功能\n  let base64ToBlob &#x3D; function(code) &#123;\n    let parts &#x3D; code.split(&#39;;base64,&#39;);\n    let contentType &#x3D; parts[0].split(&#39;:&#39;)[1];\n    let raw &#x3D; window.atob(parts[1]);\n    let rawLength &#x3D; raw.length;\n    let uInt8Array &#x3D; new Uint8Array(rawLength);\n    for (let i &#x3D; 0; i &lt; rawLength; ++i) &#123;\n      uInt8Array[i] &#x3D; raw.charCodeAt(i);\n    &#125;\n    return new Blob([uInt8Array], &#123;\n      type: contentType\n    &#125;);\n  &#125;;\n  let aLink &#x3D; document.createElement(&#39;a&#39;);\n  let blob &#x3D; base64ToBlob(base64); &#x2F;&#x2F;new Blob([content]);\n  let evt &#x3D; document.createEvent(&quot;HTMLEvents&quot;);\n  evt.initEvent(&quot;click&quot;, true, true); &#x2F;&#x2F;initEvent不加后两个参数在FF下会报错  事件类型，是否冒泡，是否阻止浏览器的默认行为\n  aLink.download &#x3D; fileName;\n  aLink.href &#x3D; URL.createObjectURL(blob);\n  aLink.click();\n&#125;</code></pre>\n\n<h2 id=\"6、图片地址转base64\"><a href=\"#6、图片地址转base64\" class=\"headerlink\" title=\"6、图片地址转base64\"></a>6、图片地址转base64</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F;传入图片路径，返回base64，使用getBase64(url).then(function(base64)&#123;&#125;,function(err)&#123;&#125;);\nconst getBase64 &#x3D; function(img) &#123;  \n  let getBase64Image &#x3D; function(img, width, height) &#123; &#x2F;&#x2F;width、height调用时传入具体像素值，控制大小,不传则默认图像大小\n    let canvas &#x3D; document.createElement(&quot;canvas&quot;);\n    canvas.width &#x3D; width ? width : img.width;\n    canvas.height &#x3D; height ? height : img.height;\n    let ctx &#x3D; canvas.getContext(&quot;2d&quot;);\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n    let dataURL &#x3D; canvas.toDataURL();\n    return dataURL;\n  &#125;\n  let image &#x3D; new Image();\n  image.crossOrigin &#x3D; &#39;&#39;;\n  image.src &#x3D; img;\n  let deferred &#x3D; $.Deferred();\n  if (img) &#123;\n    image.onload &#x3D; function() &#123;\n      deferred.resolve(getBase64Image(image));\n    &#125;\n    return deferred.promise();\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"7、生成随机数范围\"><a href=\"#7、生成随机数范围\" class=\"headerlink\" title=\"7、生成随机数范围\"></a>7、生成随机数范围</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; 生成随机数范围\nconst random &#x3D; function(min, max) &#123; \n  if (arguments.length &#x3D;&#x3D;&#x3D; 2) &#123;\n    return Math.floor(min + Math.random() * ((max + 1) - min))\n  &#125; else &#123;\n    return null\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"8、过滤html代码\"><a href=\"#8、过滤html代码\" class=\"headerlink\" title=\"8、过滤html代码\"></a>8、过滤html代码</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">const filterTag &#x3D; function(str) &#123;\n  str &#x3D; str.replace(&#x2F;&amp;&#x2F;ig, &#39;&amp;&#39;)\n  str &#x3D; str.replace(&#x2F;&lt;&#x2F;ig, &#39;&lt;&#39;)\n  str &#x3D; str.replace(&#x2F;&gt;&#x2F;ig, &#39;&gt;&#39;)\n  str &#x3D; str.replace(&#39; &#39;, &#39; &#39;)\n  return str\n&#125;</code></pre>\n\n<h2 id=\"9、去除字符串空格\"><a href=\"#9、去除字符串空格\" class=\"headerlink\" title=\"9、去除字符串空格\"></a>9、去除字符串空格</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; 去除空格， type:  1-所有空格  2-前后空格  3-前空格 4-后空格\nconst trim &#x3D; function(str, type) &#123; \n  type &#x3D; type || 1\n  switch (type) &#123;\n    case 1:\n      return str.replace(&#x2F;\\s+&#x2F;g, &#39;&#39;)\n    case 2:\n      return str.replace(&#x2F;(^\\s*)|(\\s*$)&#x2F;g, &#39;&#39;)\n    case 3:\n      return str.replace(&#x2F;(^\\s*)&#x2F;g, &#39;&#39;)\n    case 4:\n      return str.replace(&#x2F;(\\s*$)&#x2F;g, &#39;&#39;)\n    default:\n      return str\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"10、常用正则验证\"><a href=\"#10、常用正则验证\" class=\"headerlink\" title=\"10、常用正则验证\"></a>10、常用正则验证</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> &#x2F;&#x2F; 常用正则验证，注意type大小写\nconst checkStr &#x3D; function(str, type) &#123;\n  switch (type) &#123;\n    case &#39;phone&#39;: &#x2F;&#x2F; 手机号码\n      return &#x2F;^1[3|4|5|6|7|8|9][0-9]&#123;9&#125;$&#x2F;.test(str)\n    case &#39;tel&#39;: &#x2F;&#x2F; 座机\n      return &#x2F;^(0\\d&#123;2,3&#125;-\\d&#123;7,8&#125;)(-\\d&#123;1,4&#125;)?$&#x2F;.test(str)\n    case &#39;card&#39;: &#x2F;&#x2F; 身份证\n      return &#x2F;(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)&#x2F;.test(str)\n    case &#39;pwd&#39;: &#x2F;&#x2F; 密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线\n      return &#x2F;^[a-zA-Z]\\w&#123;5,17&#125;$&#x2F;.test(str)\n    case &#39;postal&#39;: &#x2F;&#x2F; 邮政编码\n      return &#x2F;[1-9]\\d&#123;5&#125;(?!\\d)&#x2F;.test(str)\n    case &#39;QQ&#39;: &#x2F;&#x2F; QQ号\n      return &#x2F;^[1-9][0-9]&#123;4,9&#125;$&#x2F;.test(str)\n    case &#39;email&#39;: &#x2F;&#x2F; 邮箱\n      return &#x2F;^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$&#x2F;.test(str)\n    case &#39;money&#39;: &#x2F;&#x2F; 金额(小数点2位)\n      return &#x2F;^\\d*(?:\\.\\d&#123;0,2&#125;)?$&#x2F;.test(str)\n    case &#39;URL&#39;: &#x2F;&#x2F; 网址\n      return &#x2F;(http|ftp|https):\\&#x2F;\\&#x2F;[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^&#x3D;%&amp;:&#x2F;~\\+#]*[\\w\\-\\@?^&#x3D;%&amp;&#x2F;~\\+#])?&#x2F;.test(str)\n    case &#39;IP&#39;: &#x2F;&#x2F; IP\n      return &#x2F;((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))&#x2F;.test(str)\n    case &#39;date&#39;: &#x2F;&#x2F; 日期时间\n      return &#x2F;^(\\d&#123;4&#125;)\\-(\\d&#123;2&#125;)\\-(\\d&#123;2&#125;) (\\d&#123;2&#125;)(?:\\:\\d&#123;2&#125;|:(\\d&#123;2&#125;):(\\d&#123;2&#125;))$&#x2F;.test(str) ||\n        &#x2F;^(\\d&#123;4&#125;)\\-(\\d&#123;2&#125;)\\-(\\d&#123;2&#125;)$&#x2F;.test(str)\n    case &#39;number&#39;: &#x2F;&#x2F; 数字\n      return &#x2F;^[0-9]$&#x2F;.test(str)\n    case &#39;english&#39;: &#x2F;&#x2F; 英文\n      return &#x2F;^[a-zA-Z]+$&#x2F;.test(str)\n    case &#39;chinese&#39;: &#x2F;&#x2F; 中文\n      return &#x2F;^[\\u4E00-\\u9FA5]+$&#x2F;.test(str)\n    case &#39;lower&#39;: &#x2F;&#x2F; 小写\n      return &#x2F;^[a-z]+$&#x2F;.test(str)\n    case &#39;upper&#39;: &#x2F;&#x2F; 大写\n      return &#x2F;^[A-Z]+$&#x2F;.test(str)\n    case &#39;HTML&#39;: &#x2F;&#x2F; HTML标记\n      return &#x2F;&lt;(&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&#39;&quot;&gt;])*&gt;&#x2F;.test(str)\n    default:\n      return true\n  &#125;\n&#125;</code></pre>\n\n","text":"JavaScript常用函数封装方法1、加载js || css || styleconst loadRes &#x3D; function(name, type, fn) &#123; &#x2F;&#x2F; 加载js || css || style let ref if (t...","link":"","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"前端","slug":"前端","count":6,"path":"api/categories/前端.json"}],"tags":[{"name":"js","slug":"js","count":4,"path":"api/tags/js.json"},{"name":"常用方法","slug":"常用方法","count":1,"path":"api/tags/常用方法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaScript%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">JavaScript常用函数封装方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%8A%A0%E8%BD%BDjs-css-style\"><span class=\"toc-text\">1、加载js || css || style</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%8F%96url%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">2、取url参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81cookie%E6%93%8D%E4%BD%9C%E3%80%90set%EF%BC%8Cget%EF%BC%8Cdel%E3%80%91\"><span class=\"toc-text\">3、cookie操作【set，get，del】</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">4、时间格式化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81base64%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">5、base64图片下载功能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80%E8%BD%ACbase64\"><span class=\"toc-text\">6、图片地址转base64</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">7、生成随机数范围</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8%E3%80%81%E8%BF%87%E6%BB%A4html%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">8、过滤html代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9%E3%80%81%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A9%BA%E6%A0%BC\"><span class=\"toc-text\">9、去除字符串空格</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10%E3%80%81%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">10、常用正则验证</span></a></li></ol></li></ol>","author":{"name":"zengdw","slug":"blog-author","avatar":"/img/z.png","link":"/","description":"个人学习记录","socials":{"github":"https://github.com/zengdw","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/zengdw"},"email":{"icon":"/img/svg/email-fill.svg","link":"mailto:309606298@qq.com"}}}},"mapped":true,"prev_post":{"title":"Ubuntu20.04 安装 Kubernetes 1.22","uid":"ddc0f00adba19563bf15acc2e2b6d65d","slug":36779,"date":"2021-09-16T05:59:05.000Z","updated":"2024-11-07T06:45:23.576Z","comments":true,"path":"api/articles/36779.json","keywords":"zengdw, java, html, js, css, spring, mysql","cover":null,"text":"Ubuntu20.04 安装 Kubernetes 1.221、基础条件 每台机器 2 GB 或更多的 RAM （如果少于这个数字将会影响你应用的运行内存) 2 CPU 核或更多 集群中的所有机器的网络彼此均能相互连接 节点之中不可以有重复的主机名、MAC 地址或 product...","link":"","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Kubernetes","slug":"Kubernetes","count":2,"path":"api/tags/Kubernetes.json"}],"author":{"name":"zengdw","slug":"blog-author","avatar":"/img/z.png","link":"/","description":"个人学习记录","socials":{"github":"https://github.com/zengdw","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/zengdw"},"email":{"icon":"/img/svg/email-fill.svg","link":"mailto:309606298@qq.com"}}}}},"next_post":{"title":"为什么Java中1000==1000为false，而100==100为true？","uid":"2ccfc909aebeafe15ee74b64b3820d5d","slug":42461,"date":"2021-08-02T08:00:15.000Z","updated":"2024-11-07T06:45:23.584Z","comments":true,"path":"api/articles/42461.json","keywords":"zengdw, java, html, js, css, spring, mysql","cover":null,"text":"为什么Java中1000 == 1000为false，而100 == 100为true？主要是Integer内部类IntegerCache缓存了从 - 128 到 127 之间的所有的整数对象 private static class IntegerCache &#123; st...","link":"","photos":[],"count_time":{"symbolsCount":959,"symbolsTime":"1 mins."},"categories":[{"name":"转载","slug":"转载","count":1,"path":"api/categories/转载.json"}],"tags":[{"name":"java","slug":"java","count":1,"path":"api/tags/java.json"},{"name":"基础","slug":"基础","count":1,"path":"api/tags/基础.json"}],"author":{"name":"zengdw","slug":"blog-author","avatar":"/img/z.png","link":"/","description":"个人学习记录","socials":{"github":"https://github.com/zengdw","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/zengdw"},"email":{"icon":"/img/svg/email-fill.svg","link":"mailto:309606298@qq.com"}}}}}}