{"title":"第一个Kubernetes服务","uid":"bb670faffeae4e8deeed3432c0004482","slug":50138,"date":"2021-09-16T09:15:43.000Z","updated":"2024-11-07T06:45:23.586Z","comments":true,"path":"api/articles/50138.json","keywords":"zengdw, java, html, js, css, spring, mysql","cover":null,"content":"<h1 id=\"第一个Kubernetes服务\"><a href=\"#第一个Kubernetes服务\" class=\"headerlink\" title=\"第一个Kubernetes服务\"></a>第一个Kubernetes服务</h1><h2 id=\"创建-Deployment\"><a href=\"#创建-Deployment\" class=\"headerlink\" title=\"创建 Deployment\"></a>创建 Deployment</h2><p>nginx-deployment.yaml</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: apps&#x2F;v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment # 表示Deployment的名字\n  labels:\n    app: nginx\nspec:\n  replicas: 3 # Pod副本个数\n  selector: # selector 字段定义 Deployment 如何查找要管理的 Pods\n    matchLabels: # 表示匹配labels key&#x3D;app，value&#x3D;ngix的Pod\n      app: nginx\n  template:\n    metadata:\n      labels: # Pod的标签，要与上面的selector.matchLabels的匹配，Deployment才能管理这个Pod\n        app: nginx\n    spec:\n      containers: # 定义容器镜像\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80</code></pre>\n\n<p>1、通过运行以下命令创建 Deployment：</p>\n<p><code>kubectl apply -f nginx-deployment.yaml --record</code> </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>说明：</strong> 你可以设置 <code>--record</code> 标志将所执行的命令写入资源注解 <code>kubernetes.io/change-cause</code> 中。 这对于以后的检查是有用的。例如，要查看针对每个 Deployment 修订版本所执行过的命令。</p></blockquote>\n<p>2、运行 <code>kubectl get deployments</code> 检查 Deployment 是否已创建。如果仍在创建 Deployment， 则输出类似于：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">NAME               READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment   0&#x2F;3     3            0           41s</code></pre>\n\n<p>在检查集群中的 Deployment 时，所显示的字段有：</p>\n<ul>\n<li><code>NAME</code> 列出了集群中 Deployment 的名称。</li>\n<li><code>READY</code> 显示应用程序的可用的 <em>副本</em> 数。显示的模式是“就绪个数/期望个数”。</li>\n<li><code>UP-TO-DATE</code> 显示为了达到期望状态已经更新的副本数。</li>\n<li><code>AVAILABLE</code> 显示应用可供用户使用的副本数。</li>\n<li><code>AGE</code> 显示应用程序运行的时间。</li>\n</ul>\n<p>请注意期望副本数是根据 <code>.spec.replicas</code> 字段设置 3。</p>\n<p>3、要查看 Deployment 上线状态，运行 <code>kubectl rollout status deployment/nginx-deployment</code>。</p>\n<p>输出类似于：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 0 of 3 updated replicas are available...</code></pre>\n\n<p>4、几秒钟后再次运行 <code>kubectl get deployments</code>。输出类似于：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">NAME               READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment   3&#x2F;3     3            3           9m18s</code></pre>\n\n<p>注意 Deployment 已创建全部三个副本，并且所有副本都是最新的（它们包含最新的 Pod 模板） 并且可用。</p>\n<p>5、要查看 Deployment 创建的 ReplicaSet（<code>rs</code>），运行 <code>kubectl get rs</code>。 输出类似于：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">NAME                          DESIRED   CURRENT   READY   AGE\nnginx-deployment-66b6c48dd5   3         3         3       9m58s</code></pre>\n\n<p>ReplicaSet 输出中包含以下字段：</p>\n<ul>\n<li><code>NAME</code> 列出名字空间中 ReplicaSet 的名称；</li>\n<li><code>DESIRED</code> 显示应用的期望副本个数，即在创建 Deployment 时所定义的值。 此为期望状态；</li>\n<li><code>CURRENT</code> 显示当前运行状态中的副本个数；</li>\n<li><code>READY</code> 显示应用中有多少副本可以为用户提供服务；</li>\n<li><code>AGE</code> 显示应用已经运行的时间长度。</li>\n</ul>\n<p>注意 ReplicaSet 的名称始终被格式化为<code>[Deployment名称]-[随机字符串]</code>。 其中的随机字符串是使用 pod-template-hash 作为种子随机生成的。</p>\n<h2 id=\"更新Deployment\"><a href=\"#更新Deployment\" class=\"headerlink\" title=\"更新Deployment\"></a>更新Deployment</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>说明：</strong> 仅当 Deployment Pod 模板（即 <code>.spec.template</code>）发生改变时，例如模板的标签或容器镜像被更新， 才会触发 Deployment 上线。 其他更新（如对 Deployment 执行扩缩容的操作）不会触发上线动作</p></blockquote>\n<p>1、把<code>nginx-deployment.yaml</code>中<code>spec.containers.image: nginx:1.14.2</code>改为<code>spec.containers.image: nginx:1.16.1</code></p>\n<p>2、重新执行<code>kubectl apply -f nginx-deployment.yaml --record</code> </p>\n<p>3、要查看上线状态，运行<code>kubectl rollout status deployment/nginx-deployment</code>, 输出类型于:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Waiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 out of 3 new replicas have been updated...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 out of 3 new replicas have been updated...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 out of 3 new replicas have been updated...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 2 out of 3 new replicas have been updated...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 2 out of 3 new replicas have been updated...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 2 out of 3 new replicas have been updated...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 old replicas are pending termination...\nWaiting for deployment &quot;nginx-deployment&quot; rollout to finish: 1 old replicas are pending termination...\ndeployment &quot;nginx-deployment&quot; successfully rolled out</code></pre>\n\n<p>4、运行 <code>kubectl get rs</code> 查看 Deployment 通过创建新的 ReplicaSet 并将其扩容到 3 个副本并将旧 ReplicaSet 缩容到 0 个副本完成了 Pod 的更新操作：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">NAME                          DESIRED   CURRENT   READY   AGE\nnginx-deployment-559d658b74   3         3         3       5m41s\nnginx-deployment-66b6c48dd5   0         0         0       20m</code></pre>\n\n<p>Deployment 可确保在更新时仅关闭一定数量的 Pod。默认情况下，它确保至少所需 Pods 75% 处于运行状态（最大不可用比例为 25%）。</p>\n<p>Deployment 还确保仅所创建 Pod 数量只可能比期望 Pods 数高一点点。 默认情况下，它可确保启动的 Pod 个数比期望个数最多多出 25%（最大峰值 25%）。</p>\n<p>例如，如果仔细查看上述 Deployment ，将看到它首先创建了一个新的 Pod，然后删除了一些旧的 Pods， 并创建了新的 Pods。它不会杀死老 Pods，直到有足够的数量新的 Pods 已经出现。 在足够数量的旧 Pods 被杀死前并没有创建新 Pods。它确保至少 2 个 Pod 可用，同时 最多总共 4 个 Pod 可用。</p>\n<p>5、获取 Deployment 的更多信息，运行<code>kubectl describe deployments</code>，输出类型于：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Name:                   nginx-deployment\nNamespace:              default\nCreationTimestamp:      Thu, 16 Sep 2021 09:25:41 +0000\nLabels:                 app&#x3D;nginx\nAnnotations:            deployment.kubernetes.io&#x2F;revision: 2\n                        kubernetes.io&#x2F;change-cause: kubectl apply --filename&#x3D;nginx-deployment.yaml --record&#x3D;true\nSelector:               app&#x3D;nginx\nReplicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable\nStrategyType:           RollingUpdate\nMinReadySeconds:        0\nRollingUpdateStrategy:  25% max unavailable, 25% max surge\nPod Template:\n  Labels:  app&#x3D;nginx\n  Containers:\n   nginx:\n    Image:        nginx:1.16.1\n    Port:         80&#x2F;TCP\n    Host Port:    0&#x2F;TCP\n    Environment:  &lt;none&gt;\n    Mounts:       &lt;none&gt;\n  Volumes:        &lt;none&gt;\nConditions:\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    NewReplicaSetAvailable\nOldReplicaSets:  &lt;none&gt;\nNewReplicaSet:   nginx-deployment-559d658b74 (3&#x2F;3 replicas created)\nEvents:\n  Type    Reason             Age    From                   Message\n  ----    ------             ----   ----                   -------\n  Normal  ScalingReplicaSet  21m    deployment-controller  Scaled up replica set nginx-deployment-66b6c48dd5 to 3\n  Normal  ScalingReplicaSet  6m45s  deployment-controller  Scaled up replica set nginx-deployment-559d658b74 to 1\n  Normal  ScalingReplicaSet  3m36s  deployment-controller  Scaled down replica set nginx-deployment-66b6c48dd5 to 2\n  Normal  ScalingReplicaSet  3m36s  deployment-controller  Scaled up replica set nginx-deployment-559d658b74 to 2\n  Normal  ScalingReplicaSet  3m34s  deployment-controller  Scaled down replica set nginx-deployment-66b6c48dd5 to 1\n  Normal  ScalingReplicaSet  3m34s  deployment-controller  Scaled up replica set nginx-deployment-559d658b74 to 3\n  Normal  ScalingReplicaSet  2m6s   deployment-controller  Scaled down replica set nginx-deployment-66b6c48dd5 to 0</code></pre>\n\n<h2 id=\"回滚-Deployment\"><a href=\"#回滚-Deployment\" class=\"headerlink\" title=\"回滚 Deployment\"></a>回滚 Deployment</h2><p>在Deployment不稳定或出现异常时我们需要回滚Deployment。默认情况下，Deployment的所有上线记录都保存在服务器中，以便可以随时回滚。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>说明：</strong> Deployment 被触发上线时，系统就会创建 Deployment 的新的修订版本。 这意味着仅当 Deployment 的 Pod 模板（<code>.spec.template</code>）发生更改时，才会创建新修订版本 – 例如，模板的标签或容器镜像发生变化。 其他更新，如 Deployment 的扩缩容操作不会创建 Deployment 修订版本。 这是为了方便同时执行手动缩放或自动缩放。 换言之，当你回滚到较早的修订版本时，只有 Deployment 的 Pod 模板部分会被回滚。</p></blockquote>\n<ul>\n<li><p>假设你在更新 Deployment 时犯了一个拼写错误，将镜像名称命名设置为 <code>nginx:1.161</code> 而不是 <code>nginx:1.16.1</code>：</p>\n</li>\n<li><p>查看所创建的 Pod，你会注意到新 ReplicaSet 所创建的 1 个 Pod 卡顿在镜像拉取循环中。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">watch kubectl get pods\n######################\nEvery 2.0s: kubectl get pods                                                                    ubuntu: Fri Sep 17 02:15:38 2021\n\nNAME                                READY   STATUS             RESTARTS      AGE\nnginx-deployment-559d658b74-5gmdf   1&#x2F;1     Running            1 (50m ago)   16h\nnginx-deployment-559d658b74-9rv5c   1&#x2F;1     Running            1 (50m ago)   16h\nnginx-deployment-559d658b74-l7dnt   1&#x2F;1     Running            1 (50m ago)   16h\nnginx-deployment-66bc5d6c8-lqlrm    0&#x2F;1     ImagePullBackOff   0             3m14s</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>说明：</strong> Deployment 控制器自动停止有问题的上线过程，并停止对新的 ReplicaSet 扩容。 这行为取决于所指定的 rollingUpdate 参数（具体为 <code>maxUnavailable</code>）。 默认情况下，Kubernetes 将此值设置为 25%。</p></blockquote>\n</li>\n<li><p>你可以看到旧的副本有两个（<code>nginx-deployment-559d658b74</code> 和 <code>nginx-deployment-66b6c48dd5</code>）， 新的副本有 1 个（<code>nginx-deployment-66bc5d6c8</code>）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get rs\n##############\nNAME                          DESIRED   CURRENT   READY   AGE\nnginx-deployment-559d658b74   3         3         3       16h\nnginx-deployment-66b6c48dd5   0         0         0       16h\nnginx-deployment-66bc5d6c8    1         1         0       4m46s</code></pre></li>\n<li><p>获取 Deployment 描述信息：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl describe deployment nginx-deployment\n########################\nName:                   nginx-deployment\nNamespace:              default\nCreationTimestamp:      Thu, 16 Sep 2021 09:25:41 +0000\nLabels:                 app&#x3D;nginx\nAnnotations:            deployment.kubernetes.io&#x2F;revision: 3\nSelector:               app&#x3D;nginx\nReplicas:               3 desired | 1 updated | 4 total | 3 available | 1 unavailable\nStrategyType:           RollingUpdate\nMinReadySeconds:        0\nRollingUpdateStrategy:  25% max unavailable, 25% max surge\nPod Template:\n  Labels:  app&#x3D;nginx\n  Containers:\n   nginx:\n    Image:        nginx:1.161\n    Port:         80&#x2F;TCP\n    Host Port:    0&#x2F;TCP\n    Environment:  &lt;none&gt;\n    Mounts:       &lt;none&gt;\n  Volumes:        &lt;none&gt;\nConditions:\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    ReplicaSetUpdated\nOldReplicaSets:  nginx-deployment-559d658b74 (3&#x2F;3 replicas created)\nNewReplicaSet:   nginx-deployment-66bc5d6c8 (1&#x2F;1 replicas created)\nEvents:\n  Type    Reason             Age    From                   Message\n  ----    ------             ----   ----                   -------\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled up replica set nginx-deployment-66b6c48dd5 to 3\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled up replica set nginx-deployment-559d658b74 to 1\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled down replica set nginx-deployment-66b6c48dd5 to 2\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled up replica set nginx-deployment-559d658b74 to 2\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled down replica set nginx-deployment-66b6c48dd5 to 1\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled up replica set nginx-deployment-559d658b74 to 3\n  Normal  ScalingReplicaSet  16h    deployment-controller  Scaled down replica set nginx-deployment-66b6c48dd5 to 0\n  Normal  ScalingReplicaSet  8m25s  deployment-controller  Scaled up replica set nginx-deployment-66bc5d6c8 to 1</code></pre></li>\n</ul>\n<h2 id=\"检查-Deployment-上线历史\"><a href=\"#检查-Deployment-上线历史\" class=\"headerlink\" title=\"检查 Deployment 上线历史\"></a>检查 Deployment 上线历史</h2><p>按照如下步骤检查回滚历史：</p>\n<ol>\n<li><p>首先，检查 Deployment 修订历史：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl rollout history deployment nginx-deployment\n##############################\ndeployment.apps&#x2F;nginx-deployment \nREVISION  CHANGE-CAUSE\n1         &lt;none&gt;\n2         kubectl apply --filename&#x3D;nginx-deployment.yaml --record&#x3D;true\n3         kubectl apply --filename&#x3D;nginx-deployment.yaml --record&#x3D;true</code></pre></li>\n<li><p>要查看修订历史的详细信息，运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl rollout history deployment nginx-deployment --revision&#x3D;3\n#############################\ndeployment.apps&#x2F;nginx-deployment with revision #3\nPod Template:\n  Labels:\tapp&#x3D;nginx\n\tpod-template-hash&#x3D;66bc5d6c8\n  Annotations:\tkubernetes.io&#x2F;change-cause: kubectl apply --filename&#x3D;nginx-deployment.yaml --record&#x3D;true\n  Containers:\n   nginx:\n    Image:\tnginx:1.161\n    Port:\t80&#x2F;TCP\n    Host Port:\t0&#x2F;TCP\n    Environment:\t&lt;none&gt;\n    Mounts:\t&lt;none&gt;\n  Volumes:\t&lt;none&gt;</code></pre></li>\n</ol>\n<h2 id=\"回滚到之前的修订版本\"><a href=\"#回滚到之前的修订版本\" class=\"headerlink\" title=\"回滚到之前的修订版本\"></a>回滚到之前的修订版本</h2><p>按照下面给出的步骤将 Deployment 从当前版本回滚到以前的版本（即版本 2）</p>\n<ol>\n<li><p>撤消当前上线并回滚到以前的修订版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl rollout undo deployment nginx-deployment\n##################\ndeployment.apps&#x2F;nginx-deployment rolled back</code></pre>\n\n<p>或者也可以使用<code>--to-revision</code>来回滚到特定版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl rollout undo deployment nginx-deployment --to-revision&#x3D;2</code></pre></li>\n<li><p>检查回滚是否成功以及 Deployment 是否正在运行，运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get deployment nginx-deployment\n###################\nNAME               READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment   3&#x2F;3     3            3           17h\n###################\n\nkubectl get rs\n###################\nNAME                          DESIRED   CURRENT   READY   AGE\nnginx-deployment-559d658b74   3         3         3       16h\nnginx-deployment-66b6c48dd5   0         0         0       17h\nnginx-deployment-66bc5d6c8    0         0         0       23m</code></pre></li>\n<li><p>获取 Deployment 描述信息：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl describe deployment nginx-deployment\n###################\nName:                   nginx-deployment\nNamespace:              default\nCreationTimestamp:      Thu, 16 Sep 2021 09:25:41 +0000\nLabels:                 app&#x3D;nginx\nAnnotations:            deployment.kubernetes.io&#x2F;revision: 4\n                        kubernetes.io&#x2F;change-cause: kubectl apply --filename&#x3D;nginx-deployment.yaml --record&#x3D;true\nSelector:               app&#x3D;nginx\nReplicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable\nStrategyType:           RollingUpdate\nMinReadySeconds:        0\nRollingUpdateStrategy:  25% max unavailable, 25% max surge\nPod Template:\n  Labels:  app&#x3D;nginx\n  Containers:\n   nginx:\n    Image:        nginx:1.16.1 # 可以看到版本又回到1.16.1了\n    Port:         80&#x2F;TCP\n    Host Port:    0&#x2F;TCP\n    Environment:  &lt;none&gt;\n    Mounts:       &lt;none&gt;\n  Volumes:        &lt;none&gt;\nConditions:\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    NewReplicaSetAvailable\nOldReplicaSets:  &lt;none&gt;\nNewReplicaSet:   nginx-deployment-559d658b74 (3&#x2F;3 replicas created)\nEvents:\n  Type    Reason             Age   From                   Message\n  ----    ------             ----  ----                   -------\n  Normal  ScalingReplicaSet  24m   deployment-controller  Scaled up replica set nginx-deployment-66bc5d6c8 to 1\n  Normal  ScalingReplicaSet  4m6s  deployment-controller  Scaled down replica set nginx-deployment-66bc5d6c8 to 0</code></pre></li>\n</ol>\n<h2 id=\"集群缩放\"><a href=\"#集群缩放\" class=\"headerlink\" title=\"集群缩放\"></a>集群缩放</h2><p>你可以使用如下指令缩放 Deployment：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl scale deployment&#x2F;nginx-deployment --replicas&#x3D;4\n######################\ndeployment.apps&#x2F;nginx-deployment scaled</code></pre>\n\n<p>使用命令<code>kubectl get pod</code>查看pod个数</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx-deployment-559d658b74-2wdd4   1&#x2F;1     Running   0          8m40s\nnginx-deployment-559d658b74-d5sr4   1&#x2F;1     Running   0          8m41s\nnginx-deployment-559d658b74-pss2w   1&#x2F;1     Running   0          45s\nnginx-deployment-559d658b74-tcd7h   1&#x2F;1     Running   0          8m43s</code></pre>\n\n<p>你可以使用下面的命令设置pod的自动缩放，并基于pods的CPU利用率选择要运行的Pods的个数</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl autoscale deployment&#x2F;nginx-deployment --min&#x3D;3 --max&#x3D;10 --cpu-percent&#x3D;80\n#######################\nhorizontalpodautoscaler.autoscaling&#x2F;nginx-deployment autoscaled</code></pre>\n\n<p>使用<code>kubectl get hpa</code>查看自动缩放设置</p>\n<h2 id=\"映射服务，让用户可以访问\"><a href=\"#映射服务，让用户可以访问\" class=\"headerlink\" title=\"映射服务，让用户可以访问\"></a>映射服务，让用户可以访问</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl expose deployment nginx-deployment --port&#x3D;80 --name nginx-service --type&#x3D;NodePort</code></pre>\n\n<p>命令行各参数含义：</p>\n<ul>\n<li>expose deployment：通过deployment暴露服务，后面跟deployment的名称</li>\n<li>–port：指定容器的端口</li>\n<li>–name：服务的名称</li>\n<li>–type：服务的类型：ClusterIP, NodePort, LoadBalancer, or ExternalName，默认是ClusterIP</li>\n</ul>\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">service&#x2F;nginx-service exposed</code></pre>\n\n<p>或者使用<code>nginx-service.yaml</code>配置文件创建</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  labels:\n    run: ngxin-service\nspec:\n  selector:\n    app: nginx # 指定Pod的label\n  type: NodePort\n  ports:\n  - targetPort: 80 # 容器的端口\n    port: 80  \n</code></pre>\n\n<p>执行<code>kubectl apply -f nginx-service.yaml</code>创建service</p>\n<p>使用<code>kubectl get svc</code>查看已暴露的服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">NAME            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE\nkubernetes      ClusterIP   10.96.0.1       &lt;none&gt;        443&#x2F;TCP        18h\n# nginx-service 服务已成功发布并将 80 端口映射为 32381\nnginx-service   NodePort    10.103.31.252   &lt;none&gt;        80:32381&#x2F;TCP   6s</code></pre>\n\n<h2 id=\"查看服务详情\"><a href=\"#查看服务详情\" class=\"headerlink\" title=\"查看服务详情\"></a>查看服务详情</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl describe service nginx-service\n#####################\nName:                     nginx-service\nNamespace:                default\nLabels:                   app&#x3D;nginx\nAnnotations:              &lt;none&gt;\nSelector:                 app&#x3D;nginx\nType:                     NodePort\nIP Family Policy:         SingleStack\nIP Families:              IPv4\nIP:                       10.103.31.252\nIPs:                      10.103.31.252\nPort:                     &lt;unset&gt;  80&#x2F;TCP\nTargetPort:               80&#x2F;TCP\nNodePort:                 &lt;unset&gt;  32381&#x2F;TCP\nEndpoints:                10.244.1.5:80,10.244.1.6:80,10.244.2.5:80\nSession Affinity:         None\nExternal Traffic Policy:  Cluster\nEvents:                   &lt;none&gt;</code></pre>\n\n<h2 id=\"验证是否能访问\"><a href=\"#验证是否能访问\" class=\"headerlink\" title=\"验证是否能访问\"></a>验证是否能访问</h2><p>通过浏览器访问Master服务器<code>http://&lt;Master IP&gt;:32381/</code></p>\n<h2 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl delete service nginx-service\n\n# 输出如下\nservice &quot;nginx-service&quot; deleted</code></pre>\n\n","text":"第一个Kubernetes服务创建 Deploymentnginx-deployment.yaml apiVersion: apps&#x2F;v1 kind: Deployment metadata: name: nginx-deployment # 表示Deployment的...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"Kubernetes","slug":"Kubernetes","count":1,"path":"api/categories/Kubernetes.json"}],"tags":[{"name":"Kubernetes","slug":"Kubernetes","count":2,"path":"api/tags/Kubernetes.json"},{"name":"Deployment","slug":"Deployment","count":1,"path":"api/tags/Deployment.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AAKubernetes%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">第一个Kubernetes服务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA-Deployment\"><span class=\"toc-text\">创建 Deployment</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0Deployment\"><span class=\"toc-text\">更新Deployment</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E6%BB%9A-Deployment\"><span class=\"toc-text\">回滚 Deployment</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A3%80%E6%9F%A5-Deployment-%E4%B8%8A%E7%BA%BF%E5%8E%86%E5%8F%B2\"><span class=\"toc-text\">检查 Deployment 上线历史</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E6%BB%9A%E5%88%B0%E4%B9%8B%E5%89%8D%E7%9A%84%E4%BF%AE%E8%AE%A2%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">回滚到之前的修订版本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9B%86%E7%BE%A4%E7%BC%A9%E6%94%BE\"><span class=\"toc-text\">集群缩放</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%98%A0%E5%B0%84%E6%9C%8D%E5%8A%A1%EF%BC%8C%E8%AE%A9%E7%94%A8%E6%88%B7%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">映射服务，让用户可以访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1%E8%AF%A6%E6%83%85\"><span class=\"toc-text\">查看服务详情</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AA%8C%E8%AF%81%E6%98%AF%E5%90%A6%E8%83%BD%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">验证是否能访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%81%9C%E6%AD%A2%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">停止服务</span></a></li></ol></li></ol>","author":{"name":"zengdw","slug":"blog-author","avatar":"/img/z.png","link":"/","description":"个人学习记录","socials":{"github":"https://github.com/zengdw","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/zengdw"},"email":{"icon":"/img/svg/email-fill.svg","link":"mailto:309606298@qq.com"}}}},"mapped":true,"prev_post":{"title":"solr 在tomcat中部署","uid":"eadba8e1a04c15f70a9e16ebbfce5177","slug":6408,"date":"2021-10-15T07:36:53.000Z","updated":"2024-11-13T02:24:55.918Z","comments":true,"path":"api/articles/6408.json","keywords":"zengdw, java, html, js, css, spring, mysql","cover":[],"text":"下载安装包在solr官网下载安装包。solr有个3个独立的软件包： 1、solr-8.10.0-src.tgz：solr的源码包 2、solr-8.10.0.tgz：solr linux环境的安装包 3、solr-8.10.0.zip：solr window环境的安装包 solr...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"中间键","slug":"中间键","count":3,"path":"api/categories/中间键.json"}],"tags":[{"name":"solr","slug":"solr","count":2,"path":"api/tags/solr.json"},{"name":"tomcat","slug":"tomcat","count":2,"path":"api/tags/tomcat.json"},{"name":"搜索引擎","slug":"搜索引擎","count":2,"path":"api/tags/搜索引擎.json"}],"author":{"name":"zengdw","slug":"blog-author","avatar":"/img/z.png","link":"/","description":"个人学习记录","socials":{"github":"https://github.com/zengdw","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/zengdw"},"email":{"icon":"/img/svg/email-fill.svg","link":"mailto:309606298@qq.com"}}}}},"next_post":{"title":"Ubuntu20.04 安装 Kubernetes 1.22","uid":"ddc0f00adba19563bf15acc2e2b6d65d","slug":36779,"date":"2021-09-16T05:59:05.000Z","updated":"2024-11-07T06:45:23.576Z","comments":true,"path":"api/articles/36779.json","keywords":"zengdw, java, html, js, css, spring, mysql","cover":null,"text":"Ubuntu20.04 安装 Kubernetes 1.221、基础条件 每台机器 2 GB 或更多的 RAM （如果少于这个数字将会影响你应用的运行内存) 2 CPU 核或更多 集群中的所有机器的网络彼此均能相互连接 节点之中不可以有重复的主机名、MAC 地址或 product...","link":"","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Kubernetes","slug":"Kubernetes","count":2,"path":"api/tags/Kubernetes.json"}],"author":{"name":"zengdw","slug":"blog-author","avatar":"/img/z.png","link":"/","description":"个人学习记录","socials":{"github":"https://github.com/zengdw","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/zengdw"},"email":{"icon":"/img/svg/email-fill.svg","link":"mailto:309606298@qq.com"}}}}}}