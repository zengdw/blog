{"title":"Ubuntu20.04 安装 Kubernetes 1.22","uid":"ddc0f00adba19563bf15acc2e2b6d65d","slug":36779,"date":"2021-09-16T05:59:05.000Z","updated":"2024-11-07T06:45:23.576Z","comments":true,"path":"api/articles/36779.json","keywords":"zengdw, java, html, js, css, spring, mysql","cover":null,"content":"<h1 id=\"Ubuntu20-04-安装-Kubernetes-1-22\"><a href=\"#Ubuntu20-04-安装-Kubernetes-1-22\" class=\"headerlink\" title=\"Ubuntu20.04 安装 Kubernetes 1.22\"></a>Ubuntu20.04 安装 Kubernetes 1.22</h1><h2 id=\"1、基础条件\"><a href=\"#1、基础条件\" class=\"headerlink\" title=\"1、基础条件\"></a>1、基础条件</h2><ul>\n<li>每台机器 2 GB 或更多的 RAM （如果少于这个数字将会影响你应用的运行内存)</li>\n<li>2 CPU 核或更多</li>\n<li>集群中的所有机器的网络彼此均能相互连接</li>\n<li>节点之中不可以有重复的主机名、MAC 地址或 product_uuid</li>\n<li>开启机器上的某些端口。请参见<a href=\"https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports\">这里</a></li>\n<li>禁用交换分区。为了保证 kubelet 正常工作</li>\n</ul>\n<p>机器信息:</p>\n<table>\n<thead>\n<tr>\n<th>hostname</th>\n<th>master</th>\n<th>node1</th>\n<th>node2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IP</td>\n<td>192.168.5.200</td>\n<td>192.168.5.201</td>\n<td>192.168.5.202</td>\n</tr>\n</tbody></table>\n<h2 id=\"2、更改iptables-配置\"><a href=\"#2、更改iptables-配置\" class=\"headerlink\" title=\"2、更改iptables 配置\"></a>2、更改iptables 配置</h2><p>确保 <code>br_netfilter</code> 模块被加载。这一操作可以通过运行 <code>lsmod | grep br_netfilter</code> 来完成。若要显式加载该模块，可执行 <code>sudo modprobe br_netfilter</code>。</p>\n<p>为了让你的 Linux 节点上的 iptables 能够正确地查看桥接流量，你需要确保在你的 <code>sysctl</code> 配置中将 <code>net.bridge.bridge-nf-call-iptables</code> 设置为 1。例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cat &lt;&lt;EOF | sudo tee &#x2F;etc&#x2F;modules-load.d&#x2F;k8s.conf\nbr_netfilter\nEOF\n\ncat &lt;&lt;EOF | sudo tee &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf\nnet.bridge.bridge-nf-call-ip6tables &#x3D; 1\nnet.bridge.bridge-nf-call-iptables &#x3D; 1\nEOF\n\nsudo sysctl --system</code></pre>\n\n<p><strong>这一操作要在3台机器上都执行。</strong></p>\n<h2 id=\"3、禁用交换分区\"><a href=\"#3、禁用交换分区\" class=\"headerlink\" title=\"3、禁用交换分区\"></a>3、禁用交换分区</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">swapoff -a\n\nvim &#x2F;etc&#x2F;fstab 注释掉最后一行</code></pre>\n\n<h2 id=\"4、修改hostname\"><a href=\"#4、修改hostname\" class=\"headerlink\" title=\"4、修改hostname\"></a>4、修改hostname</h2><p>在每个节点上执行<code>hostnamectl set-hostname 节点名称</code></p>\n<h2 id=\"5、安装runtime\"><a href=\"#5、安装runtime\" class=\"headerlink\" title=\"5、安装runtime\"></a>5、安装runtime</h2><p>因为最终pod都是运行在容器中的，所以这里需要安装容器运行时。这里使用Docker容器 ，安装方法看<a href=\"https://docs.docker.com/engine/install/\">这里</a>。3台机器都安装好后配置docker镜像加速：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo mkdir -p &#x2F;etc&#x2F;docker\nsudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;\n&#123;\n  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;5z8k6du2.mirror.aliyuncs.com&quot;]\n&#125;\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker</code></pre>\n\n<h2 id=\"6、安装-kubeadm、kubelet-和-kubectl\"><a href=\"#6、安装-kubeadm、kubelet-和-kubectl\" class=\"headerlink\" title=\"6、安装 kubeadm、kubelet 和 kubectl\"></a>6、安装 kubeadm、kubelet 和 kubectl</h2><p>因为Kubernetes 的资源都在google仓库，所以我们使用阿里的镜像安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">1.更新 apt 包索引并安装使用 Kubernetes apt 仓库所需要的包\napt update &amp;&amp; apt install -y apt-transport-https\n\n2.下载公开签名秘钥\ncurl https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F;doc&#x2F;apt-key.gpg | apt-key add - \n\n3.添加 Kubernetes apt 仓库\ncat &lt;&lt;EOF &gt;&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.list\ndeb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F; kubernetes-xenial main\nEOF \n\n4.更新 apt 包索引，安装 kubelet、kubeadm 和 kubectl，并锁定其版本\napt update\napt install -y kubelet kubeadm kubectl\napt-mark hold kubelet kubeadm kubectl</code></pre>\n\n<p><strong>这一操作要在3台机器上都执行。</strong></p>\n<h2 id=\"7、配置Cgroup-驱动\"><a href=\"#7、配置Cgroup-驱动\" class=\"headerlink\" title=\"7、配置Cgroup 驱动\"></a>7、配置Cgroup 驱动</h2><p>1.配置 Docker 守护程序，尤其是使用 systemd 来管理容器的 cgroup。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo mkdir &#x2F;etc&#x2F;docker\ncat &lt;&lt;EOF | sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json\n&#123;\n  &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;],\n  &quot;log-driver&quot;: &quot;json-file&quot;,\n  &quot;log-opts&quot;: &#123;\n    &quot;max-size&quot;: &quot;100m&quot;\n  &#125;,\n  &quot;storage-driver&quot;: &quot;overlay2&quot;\n&#125;\nEOF</code></pre>\n\n<p>2.重新启动 Docker 并在启动时启用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo systemctl enable docker\nsudo systemctl daemon-reload\nsudo systemctl restart docker</code></pre>\n\n<h2 id=\"8、使用kubeadm创建集群\"><a href=\"#8、使用kubeadm创建集群\" class=\"headerlink\" title=\"8、使用kubeadm创建集群\"></a>8、使用kubeadm创建集群</h2><h3 id=\"8-1-先看下Kubernetes-集群需要哪些镜像\"><a href=\"#8-1-先看下Kubernetes-集群需要哪些镜像\" class=\"headerlink\" title=\"8.1 先看下Kubernetes 集群需要哪些镜像\"></a>8.1 先看下Kubernetes 集群需要哪些镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config images list\n####################\nk8s.gcr.io&#x2F;kube-apiserver:v1.22.2\nk8s.gcr.io&#x2F;kube-controller-manager:v1.22.2\nk8s.gcr.io&#x2F;kube-scheduler:v1.22.2\nk8s.gcr.io&#x2F;kube-proxy:v1.22.2\nk8s.gcr.io&#x2F;pause:3.5\nk8s.gcr.io&#x2F;etcd:3.5.0-0\nk8s.gcr.io&#x2F;coredns&#x2F;coredns:v1.8.4\n####################</code></pre>\n\n<p>发现都在<code>k8s.gcr.io</code>这仓库里的，直接下是下不下来的。这里使用阿里的<a href=\"https://cr.console.aliyun.com/cn-hangzhou/instances\">容器镜像服务</a>,先在镜像仓库中构建出我们需要的镜像，再从镜像仓库下到本地重新打tag就能得到所需要的镜像了。直接使用下面这个脚本下载下载需要的镜像。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-apiserver:v1.22.1\ndocker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-controller-manager:v1.22.1\ndocker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-scheduler:v1.22.1\ndocker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-proxy:v1.22.1\ndocker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;pause:3.5\ndocker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;etcd:3.5.0-0\ndocker pull registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;coredns:v1.8.4\n\n\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-apiserver:v1.22.1 k8s.gcr.io&#x2F;kube-apiserver:v1.22.1\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-controller-manager:v1.22.1 k8s.gcr.io&#x2F;kube-controller-manager:v1.22.1\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-scheduler:v1.22.1 k8s.gcr.io&#x2F;kube-scheduler:v1.22.1\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-proxy:v1.22.1 k8s.gcr.io&#x2F;kube-proxy:v1.22.1\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;pause:3.5 k8s.gcr.io&#x2F;pause:3.5\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;etcd:3.5.0-0 k8s.gcr.io&#x2F;etcd:3.5.0-0\ndocker tag registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;coredns:v1.8.4 k8s.gcr.io&#x2F;coredns&#x2F;coredns:v1.8.4\n\n\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-apiserver:v1.22.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-controller-manager:v1.22.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-scheduler:v1.22.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;kube-proxy:v1.22.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;pause:3.5\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;etcd:3.5.0-0\ndocker rmi registry.cn-hangzhou.aliyuncs.com&#x2F;zengdw-k8s&#x2F;coredns:v1.8.4</code></pre>\n\n<h3 id=\"8-2-使用kubeadm-init初始化集群\"><a href=\"#8-2-使用kubeadm-init初始化集群\" class=\"headerlink\" title=\"8.2 使用kubeadm init初始化集群\"></a>8.2 使用kubeadm init初始化集群</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm init --pod-network-cidr&#x3D;10.244.0.0&#x2F;16 --kubernetes-version&#x3D;v1.22.1 # 只需要在master节点执行</code></pre>\n\n<p>–pod-network-cidr：指定Pod网络插件使用的ip范围，注意Pod 网络不得与任何主机网络重叠。这里使用的是<a href=\"https://github.com/flannel-io/flannel#flannel\">flannel</a></p>\n<p>只要出现下面的日志就表示成功了：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Your Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME&#x2F;.kube\n  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config\n  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:\n  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.5.200:6443 --token sg48lm.lnkyzrbek8nb63co \\\n\t--discovery-token-ca-cert-hash sha256:dfe7d3ce8ac56f42862548c3b2290a70f0ffbbf2570789e648097dd0bd0fbc2a</code></pre>\n\n<p>非root用户执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mkdir -p $HOME&#x2F;.kube\nsudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config\nsudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</code></pre>\n\n<p>root用户执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf</code></pre>\n\n<p>查看节点状态</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get node\n###########\nNAME     STATUS     ROLES                  AGE   VERSION\nubuntu   NotReady   control-plane,master   24m   v1.22.1</code></pre>\n\n<p>可以看到现在节点<code>STATUS</code>还是<code>NotReady</code>。<em>ubuntu这个是前面我忘了改master节点的hostname了</em></p>\n<p>然后安装Pod网络插件，输出日志上也有提示<code>Run &quot;kubectl apply -f [podnetwork].yaml&quot;</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;master&#x2F;Documentation&#x2F;kube-flannel.yml</code></pre>\n\n<p>安装好后，等一会就能看到节点状态变成<code>Ready</code>了</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get node\n###########\nNAME     STATUS   ROLES                  AGE   VERSION\nubuntu   Ready    control-plane,master   25m   v1.22.1</code></pre>\n\n<p>在node1，node2上执行<code>kubeadm join 192.168.5.200:6443 --token sg48lm.lnkyzrbek8nb63co \\     --discovery-token-ca-cert-hash sha256:dfe7d3ce8ac56f42862548c3b2290a70f0ffbbf2570789e648097dd0bd0fbc2a</code>加入集群。</p>\n<p>等一会后，查看node和pod的状态</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get nodes\n###########\nNAME     STATUS   ROLES                  AGE     VERSION\nnode1    Ready    &lt;none&gt;                 4m57s   v1.22.1\nnode2    Ready    &lt;none&gt;                 4m45s   v1.22.1\nubuntu   Ready    control-plane,master   40m     v1.22.1\n###########\n\nkubectl get pod -n kube-system -o wide\n###########\nNAME                             READY   STATUS    RESTARTS   AGE     IP              NODE     NOMINATED NODE   READINESS GATES\ncoredns-78fcd69978-nvj8f         1&#x2F;1     Running   0          40m     10.244.0.2      ubuntu   &lt;none&gt;           &lt;none&gt;\ncoredns-78fcd69978-vxds6         1&#x2F;1     Running   0          40m     10.244.0.3      ubuntu   &lt;none&gt;           &lt;none&gt;\netcd-ubuntu                      1&#x2F;1     Running   0          40m     192.168.5.200   ubuntu   &lt;none&gt;           &lt;none&gt;\nkube-apiserver-ubuntu            1&#x2F;1     Running   0          40m     192.168.5.200   ubuntu   &lt;none&gt;           &lt;none&gt;\nkube-controller-manager-ubuntu   1&#x2F;1     Running   0          40m     192.168.5.200   ubuntu   &lt;none&gt;           &lt;none&gt;\nkube-flannel-ds-59m8w            1&#x2F;1     Running   0          5m30s   192.168.5.201   node1    &lt;none&gt;           &lt;none&gt;\nkube-flannel-ds-jcfwn            1&#x2F;1     Running   0          5m18s   192.168.5.202   node2    &lt;none&gt;           &lt;none&gt;\nkube-flannel-ds-qvsn8            1&#x2F;1     Running   0          16m     192.168.5.200   ubuntu   &lt;none&gt;           &lt;none&gt;\nkube-proxy-59zx2                 1&#x2F;1     Running   0          5m30s   192.168.5.201   node1    &lt;none&gt;           &lt;none&gt;\nkube-proxy-6dkwk                 1&#x2F;1     Running   0          40m     192.168.5.200   ubuntu   &lt;none&gt;           &lt;none&gt;\nkube-proxy-knn8c                 1&#x2F;1     Running   0          5m18s   192.168.5.202   node2    &lt;none&gt;           &lt;none&gt;\nkube-scheduler-ubuntu            1&#x2F;1     Running   0          40m     192.168.5.200   ubuntu   &lt;none&gt;           &lt;none&gt;\n###########</code></pre>\n\n<p>可以看到全都是Ready/Running状态了，至此我们的Kubernetes 集群就安装好了。</p>\n","text":"Ubuntu20.04 安装 Kubernetes 1.221、基础条件 每台机器 2 GB 或更多的 RAM （如果少于这个数字将会影响你应用的运行内存) 2 CPU 核或更多 集群中的所有机器的网络彼此均能相互连接 节点之中不可以有重复的主机名、MAC 地址或 product...","link":"","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Kubernetes","slug":"Kubernetes","count":2,"path":"api/tags/Kubernetes.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Ubuntu20-04-%E5%AE%89%E8%A3%85-Kubernetes-1-22\"><span class=\"toc-text\">Ubuntu20.04 安装 Kubernetes 1.22</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%9F%BA%E7%A1%80%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">1、基础条件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%9B%B4%E6%94%B9iptables-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2、更改iptables 配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%A6%81%E7%94%A8%E4%BA%A4%E6%8D%A2%E5%88%86%E5%8C%BA\"><span class=\"toc-text\">3、禁用交换分区</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E4%BF%AE%E6%94%B9hostname\"><span class=\"toc-text\">4、修改hostname</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%AE%89%E8%A3%85runtime\"><span class=\"toc-text\">5、安装runtime</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E5%AE%89%E8%A3%85-kubeadm%E3%80%81kubelet-%E5%92%8C-kubectl\"><span class=\"toc-text\">6、安装 kubeadm、kubelet 和 kubectl</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E9%85%8D%E7%BD%AECgroup-%E9%A9%B1%E5%8A%A8\"><span class=\"toc-text\">7、配置Cgroup 驱动</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8%E3%80%81%E4%BD%BF%E7%94%A8kubeadm%E5%88%9B%E5%BB%BA%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">8、使用kubeadm创建集群</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1-%E5%85%88%E7%9C%8B%E4%B8%8BKubernetes-%E9%9B%86%E7%BE%A4%E9%9C%80%E8%A6%81%E5%93%AA%E4%BA%9B%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">8.1 先看下Kubernetes 集群需要哪些镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-%E4%BD%BF%E7%94%A8kubeadm-init%E5%88%9D%E5%A7%8B%E5%8C%96%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">8.2 使用kubeadm init初始化集群</span></a></li></ol></li></ol></li></ol>","author":{"name":"zengdw","slug":"blog-author","avatar":"/img/z.png","link":"/","description":"个人学习记录","socials":{"github":"https://github.com/zengdw","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/zengdw"},"email":{"icon":"/img/svg/email-fill.svg","link":"mailto:309606298@qq.com"}}}},"mapped":true,"prev_post":{"title":"第一个Kubernetes服务","uid":"bb670faffeae4e8deeed3432c0004482","slug":50138,"date":"2021-09-16T09:15:43.000Z","updated":"2024-11-07T06:45:23.586Z","comments":true,"path":"api/articles/50138.json","keywords":"zengdw, java, html, js, css, spring, mysql","cover":null,"text":"第一个Kubernetes服务创建 Deploymentnginx-deployment.yaml apiVersion: apps&#x2F;v1 kind: Deployment metadata: name: nginx-deployment # 表示Deployment的...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"Kubernetes","slug":"Kubernetes","count":1,"path":"api/categories/Kubernetes.json"}],"tags":[{"name":"Kubernetes","slug":"Kubernetes","count":2,"path":"api/tags/Kubernetes.json"},{"name":"Deployment","slug":"Deployment","count":1,"path":"api/tags/Deployment.json"}],"author":{"name":"zengdw","slug":"blog-author","avatar":"/img/z.png","link":"/","description":"个人学习记录","socials":{"github":"https://github.com/zengdw","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/zengdw"},"email":{"icon":"/img/svg/email-fill.svg","link":"mailto:309606298@qq.com"}}}}},"next_post":{"title":"JavaScript常用函数封装方法","uid":"6fbfd3f92e094317427a7de3addb6e33","slug":19543,"date":"2021-09-16T03:24:59.000Z","updated":"2024-11-07T06:45:23.575Z","comments":true,"path":"api/articles/19543.json","keywords":"zengdw, java, html, js, css, spring, mysql","cover":null,"text":"JavaScript常用函数封装方法1、加载js || css || styleconst loadRes &#x3D; function(name, type, fn) &#123; &#x2F;&#x2F; 加载js || css || style let ref if (t...","link":"","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"前端","slug":"前端","count":6,"path":"api/categories/前端.json"}],"tags":[{"name":"js","slug":"js","count":4,"path":"api/tags/js.json"},{"name":"常用方法","slug":"常用方法","count":1,"path":"api/tags/常用方法.json"}],"author":{"name":"zengdw","slug":"blog-author","avatar":"/img/z.png","link":"/","description":"个人学习记录","socials":{"github":"https://github.com/zengdw","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/img/svg/gitee.svg","link":"https://gitee.com/zengdw"},"email":{"icon":"/img/svg/email-fill.svg","link":"mailto:309606298@qq.com"}}}}}}